<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MyBatis</title>
      <link href="/2022/05/17/MyBatis/"/>
      <url>/2022/05/17/MyBatis/</url>
      
        <content type="html"><![CDATA[<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb27f316bac9434bb7cff13ae1ad9a2f~tplv-k3u1fbpfcp-zoom-1.image"></p>        <h2 id="简介">          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a href="#简介" class="headerlink" title="简介"></a>简介</h2>      <p>在当下<strong>MyBatis</strong>已经是最主流的持久层框架，具体一点就是操作数据库的框架；<strong>MyBatis</strong>非常轻量，只需要通过简单的XML或者注解就可以完成数据映射和操作数据。很多大公司（比如阿里巴巴）都采用MyBatis作为Java的特久层框架，主要的原因在于它可以灵活的自定义SQL又兼具ORM框架的特性。</p>        <h3 id="ORM">          <a href="#ORM" class="heading-link"><i class="fas fa-link"></i></a><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3>      <p>ORM对象关系映射（英语：Object Relational Mapping,简称ORM,或O/RM,或O/R mapping),是一种程序设计技术用于实现面向对象编程语言里不同类型系统的数据之间的转换</p>        <h2 id="DO对象规则">          <a href="#DO对象规则" class="heading-link"><i class="fas fa-link"></i></a><a href="#DO对象规则" class="headerlink" title="DO对象规则"></a>DO对象规则</h2>      <p>所有的ORM框架都需要一个java对象来映射数据库的表,并且一一对应,一般把这类对象成为DO对象,对象名称规范是<strong>表名+DO</strong>,例如user表对象名称就是<strong>UserDO</strong></p>        <h2 id="DO对象包规则">          <a href="#DO对象包规则" class="heading-link"><i class="fas fa-link"></i></a><a href="#DO对象包规则" class="headerlink" title="DO对象包规则"></a>DO对象包规则</h2>      <blockquote><p>通常把DO对象存放在dataobject包下</p></blockquote>        <h2 id="DO对象数据类型">          <a href="#DO对象数据类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#DO对象数据类型" class="headerlink" title="DO对象数据类型"></a>DO对象数据类型</h2>      <blockquote><p>与普通POJO并无不同,但数据类型要与数据库类型进行匹配:</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71d864a3447647d2ab000ecc1866713d~tplv-k3u1fbpfcp-zoom-1.image"></p>        <h2 id="DAO层">          <a href="#DAO层" class="heading-link"><i class="fas fa-link"></i></a><a href="#DAO层" class="headerlink" title="DAO层"></a>DAO层</h2>      <blockquote><p>数据层服务称为DAO层，DAO层包含对数据库操作的接口和实现类</p></blockquote>        <h3 id="创建DAO层">          <a href="#创建DAO层" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建DAO层" class="headerlink" title="创建DAO层"></a>创建DAO层</h3>      <ol><li> 创建包</li></ol><p>com.mybatis.dao</p><ol start="2"><li> 创建DAO接口</li></ol><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//放在dao包中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.mybatis.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个接口特殊在于添加@Mapper注解</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDAO</span> {</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><ol start="3"><li> 引用DAO</li></ol><p>完成MyBatis DAO的定义后,Spring启动会自动加载这个接口并动态创建<strong>Spring Bean</strong>,只需要按照Spring Bean的方式完成资源注入即可,比如创建一个<strong>UserController</strong>用于处理用户web服务：</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.mybatis.control;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mybatis.dao.UserDAO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> UserDAO userDAO;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure>        <h2 id="MyBatis-注解CRUD">          <a href="#MyBatis-注解CRUD" class="heading-link"><i class="fas fa-link"></i></a><a href="#MyBatis-注解CRUD" class="headerlink" title="MyBatis-注解CRUD"></a>MyBatis-注解CRUD</h2>      <blockquote><p>MyBatis的强大之处在于和SQL语句的天然集成</p></blockquote>        <h3 id="查询">          <a href="#查询" class="heading-link"><i class="fas fa-link"></i></a><a href="#查询" class="headerlink" title="查询"></a>查询</h3>      <ol><li><p> 添加接口方法</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatis.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> UserDO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDAO</span> {</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加了findAll方法,查询多条记录时一般使用List作为返回类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;UserDO&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure></li><li><p> 添加<code>@Select</code>注解</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select("SELECT id,user_name as userName,pwd,nick_name as nickName,avatar,gmt_created as gmtCreated,gmt_modified as gmtModified FROM user")</span></span><br><span class="line">List&lt;UserDO&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>这里使用SQL的别名是为了完成数据映射,MyBatis转化数据的时候是按照名称一一对应的,表字段与DO字段名称不一样时,数据映射失败</p></blockquote></li></ol>        <h3 id="插入">          <a href="#插入" class="heading-link"><i class="fas fa-link"></i></a><a href="#插入" class="headerlink" title="插入"></a>插入</h3>      <p>在MyBatis中同样支持插入,可以使用<code>@Insert</code>注解,包路径为: <code>org.apache.ibatis.annotations.Insert</code></p><ol><li> 添加接口方法</li></ol><blockquote><p>执行SQL插入语句时,会返回行数,一般成功返回1,所以设置返回类型为int,判断是否插入成功可以通过返回值&gt;0来判断</p></blockquote><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatis.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> UserDO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDAO</span> {</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(UserDO userDO)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Select("SELECT id,user_name as userName,pwd,nick_name as nickName,avatar,gmt_created as gmtCreated,gmt_modified as gmtModified FROM user")</span></span><br><span class="line"></span><br><span class="line">List&lt;UserDO&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><ol start="2"><li> 添加@Insert注解<figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert("INSERT INTO user (user_name, pwd, nick_name,avatar,gmt_created,gmt_modified) VALUES(#{userName}, #{pwd}, #{nickName}, #{avatar},now(),now())")</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(UserDO userDO)</span>;</span><br></pre></td></tr></tbody></table></div></figure>Mybatis获取动态值的方式为<code>#{变量名}</code>执行的时候会自动从上下文参数获取变量的值比如:</li></ol><p><code>#{userName}实际上是执行</code><strong>userDO.getUserName()</strong> 这个方法来获取userName变量值,MyBatis会自动更新生成正式的SQL语句到数据库里执行,完成了动态数据的存储</p>        <h3 id="修改">          <a href="#修改" class="heading-link"><i class="fas fa-link"></i></a><a href="#修改" class="headerlink" title="修改"></a>修改</h3>      <p>使用@Update注解完成SQL语句:</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update("update user set nick_name=#{nickName},gmt_modified=now() where id=#{id}")</span></span><br></pre></td></tr></tbody></table></div></figure><p>这里根据id主键修改了nick_name字段,但任何数据的修改都需要同步修改gmt_modified字段,这样可以知道数据在什么时候被修改了.</p>        <h3 id="删除">          <a href="#删除" class="heading-link"><i class="fas fa-link"></i></a><a href="#删除" class="headerlink" title="删除"></a>删除</h3>      <blockquote><p>删除一般都是通过主键来进行删除.执行SQL语句时会返回删除的行数,所以方法为int型</p></blockquote><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">(<span class="type">long</span> id)</span>;</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>MyBatis除了支持DO对象传递参数之外,还可以接受普通参数,如String,int等,为了SQL语句中完成普通参数的解析要对参数增加一个注解 <strong>@Param</strong></p></blockquote><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Delete("delete from user where id=#{id}")</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDAO</span> {</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@Param("id")</span> <span class="type">long</span> id)</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p>为了验证删除成功可以用<strong>return userDAO.delete(id) &gt; 0</strong>;判断删除是否成功</p><blockquote><p>findByUserName方法通过传递自定义方法参数userName来获取UserDO数据</p></blockquote><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDAO</span> {</span><br><span class="line"></span><br><span class="line"><span class="meta">@Select("select id,user_name as userName,pwd,nick_name as nickName,avatar,gmt_created as gmtCreated,gmt_modified as gmtModified from user where user_name=#{userName} limit 1")</span></span><br><span class="line"></span><br><span class="line">UserDO <span class="title function_">findByUserName</span><span class="params">(<span class="meta">@Param("userName")</span> String name)</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure>        <h2 id="Mybatis-XML语句">          <a href="#Mybatis-XML语句" class="heading-link"><i class="fas fa-link"></i></a><a href="#Mybatis-XML语句" class="headerlink" title="Mybatis XML语句"></a>Mybatis XML语句</h2>              <h3 id="配置">          <a href="#配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置" class="headerlink" title="配置"></a>配置</h3>      <p>要使用MyBatis的XML,首先得在<strong>application.properties</strong>文件中添加配置<strong>mybatis.mapper-locations</strong>,这个配置用于指定MyBatis Mapper XML文件路径,一般来说这个路径和DAO包路径一致,又因为代码以外的文件存放在resources文件目录下:</p><blockquote><p>com.mybatis.dao为包名</p></blockquote><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis.mapper-locations=classpath:src/main/resources/com/mybatis/dao/*.xml</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="MyBatis-XML-Mapper">          <a href="#MyBatis-XML-Mapper" class="heading-link"><i class="fas fa-link"></i></a><a href="#MyBatis-XML-Mapper" class="headerlink" title="MyBatis XML Mapper"></a>MyBatis XML Mapper</h3>      <blockquote><p>一个DAO类对应一个DAO.xml文件,比如UserDAO.java对应UserDAO.xml</p></blockquote><ol><li> 头信息创建完xml文件后,要复制一下固定格式内容<figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"><span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure></li><li> 有头信息后添加mapper节点<figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br></pre></td></tr></tbody></table></div></figure></li></ol><mapper namespace="com.mybatis.dao.UserDAO"></mapper><blockquote><p>namespace这个是命名空间的含义,一般是mapper所对应的DAO接口的全称</p></blockquote><ol start="3"><li> <strong>resultMap(</strong> 在mapper根节点内 <strong>)</strong> 用于处理表和DO对象的属性映射,确保表中每个字段都有属性可以匹配<figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"><span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mybatis.dao.UserDAO"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userResultMap"</span> <span class="attr">type</span>=<span class="string">"com.mybatis.dataobject.UserDO"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_name"</span> <span class="attr">property</span>=<span class="string">"userName"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure></li></ol><ul><li>  id: 唯一标示一般命名规则是xxxResultMap用于确保唯一</li><li>  type：对应的DO类完整路径</li></ul>        <h3 id="子节点">          <a href="#子节点" class="heading-link"><i class="fas fa-link"></i></a><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h3>      <ul><li>  id设置数据库主键字段信息,column属性对应的表的字段名称,property对于的是DO属性名称</li><li>  result设置数据库其他字段信息,column属性对应的表的字段名称,property对于的是DO属性名称</li></ul>        <h3 id="Insert">          <a href="#Insert" class="heading-link"><i class="fas fa-link"></i></a><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3>      <ol><li> 首先先新增一个add方法<figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.comment.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.comment.dataobject.UserDO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDAO</span> {</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(UserDO userDO)</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure>然后打开UserDAO.xml文件添加insert语句,在mapper节点下添加insert节点:<figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">parameterType</span>=<span class="string">"com.comment.dataobject.UserDO"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    INSERT INTO user (user_name, pwd, nick_name,avatar,gmt_created,gmt_modified)</span><br><span class="line"></span><br><span class="line">    VALUES(#{userName}, #{pwd}, #{nickName}, #{avatar},now(),now())</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure></li></ol><ul><li>  id同DAO类的方法名,同一个xml内要唯一</li><li>  parameterType用于传递参数类型,一般和方法的参数类型一致</li></ul>        <h3 id="Update-Delete">          <a href="#Update-Delete" class="heading-link"><i class="fas fa-link"></i></a><a href="#Update-Delete" class="headerlink" title="Update/Delete"></a>Update/Delete</h3>      <p>在xml文件中添加update节点:</p><figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"com.youkeda.comment.dataobject.UserDO"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    update user set nick_name=#{nickName},gmt_modified=now() where id=#{id}</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p>在xml文件中添加delete节点:</p><figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    delete from user where id=#{id}</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@Param("id")</span> <span class="type">long</span> id)</span>;</span><br></pre></td></tr></tbody></table></div></figure><p>这里的delete节点并没有配置parameterType属性，这个方法的参数是由@Param注解组成,MyBatis默认的parameterType类型就是Map,所以可以省略</p>        <h3 id="Select">          <a href="#Select" class="heading-link"><i class="fas fa-link"></i></a><a href="#Select" class="headerlink" title="Select"></a>Select</h3>      <p>总结基于XML模式的开发顺序:</p><ol><li> 创建DO对象</li><li> 创建DAO对象,配置@Mapper注解</li><li> 创建XML文件,完成resultMap配置</li><li> 创建DAO接口方法</li><li> 创建相应的XML语句</li></ol><p>在xml文件增加select节点</p><figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userResultMap"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    select * from user</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUserName"</span> <span class="attr">resultMap</span>=<span class="string">"userResultMap"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    select * from user where user_name=#{userName} limit 1</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>这里多使用了一个属性resultMap这个值一般配置为该XML文件下的resultMap节点的id值</p></blockquote>        <h2 id="MyBatis-XML条件语句">          <a href="#MyBatis-XML条件语句" class="heading-link"><i class="fas fa-link"></i></a><a href="#MyBatis-XML条件语句" class="headerlink" title="MyBatis XML条件语句"></a>MyBatis XML条件语句</h2>              <h3 id="if">          <a href="#if" class="heading-link"><i class="fas fa-link"></i></a><a href="#if" class="headerlink" title="if"></a>if</h3>      <p>用于条件判断，test属性用于指定判断条件，为了拼接条件在SQL语句后强行添加</p><p><code>where 1=1</code>恒成立的条件,比如在update节点中,一般会结合条件语句进行判断再执行:</p><figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBy"</span> <span class="attr">resultType</span>=<span class="string">"Users"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    select * from users where 1=1</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"uid != 0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        and uid = #{uid}</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null and username != ''"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        and username = #{username}</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null and password !='' "</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        and password =#{password}</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"city != null and city !='' "</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        and city =#{city}</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"com.comment.dataobject.UserDO"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  update user set</span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"nickName != null"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    nick_name=#{nickName},gmt_modified=now()</span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   where id=#{id}</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="set">          <a href="#set" class="heading-link"><i class="fas fa-link"></i></a><a href="#set" class="headerlink" title="set"></a>set</h3>      <ol><li> 满足条件时，会自动添加set关键字</li><li> <strong>要注意加逗号</strong>set会去除set子句中的多余的逗号</li><li> 不满足条件时不会生成</li></ol><p><code>set</code>关键字</p><blockquote><p>修改操作一定要更新时间,set就可以避免所有列值都为null是引起的语法错误,使用set系统会自动去掉最后一个<code>,</code></p></blockquote><figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"com.comment.dataobject.UserDO"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  update user</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"nickName != null"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      nick_name=#{nickName},</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"avatar != null"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      avatar=#{avatar},</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    gmt_modified=now()</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   where id=#{id}</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="if-select">          <a href="#if-select" class="heading-link"><i class="fas fa-link"></i></a><a href="#if-select" class="headerlink" title="if+select"></a>if+select</h3>      <p>查询条件一般是动态的,比如模糊查询某个时间后注册的用户:</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; <span class="title function_">search</span><span class="params">(<span class="meta">@Param("keyWord")</span>String keyWord,<span class="meta">@Param("time")</span>LocalDateTime time)</span>;</span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"search"</span> <span class="attr">resultMap</span>=<span class="string">"userResultMap"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  select * from user where</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"keyWord != null"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      user_name like CONCAT('%',#{keyWord},'%')</span><br><span class="line"></span><br><span class="line">        or nick_name like CONCAT('%',#{keyWord},'%')</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"time != null"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      and  gmt_created &lt;![CDATA[ &gt;= ]]&gt; #{time}</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><blockquote><p><code>&gt;=、&lt;、&lt;=、&gt;、&gt;=、&amp;</code>这类的表达式会导致<span class="exturl"><a class="exturl__link" href="https://so.csdn.net/so/search?q=MyBatis&amp;spm=1001.2101.3001.7020">MyBatis</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>解析失败,所以需要使用<code>&lt;![CDATA[ key ]]&gt;</code>来包围住，当参数为LocalDateTime时,需要添加注解<code>@DateTimeFormat</code>用于把字符串转化为日期类型</p></blockquote>        <h3 id="where">          <a href="#where" class="heading-link"><i class="fas fa-link"></i></a><a href="#where" class="headerlink" title="where"></a>where</h3>      <ol><li> 如果没有条件，不会生成where关键字</li><li> 如果有条件会<strong>自动生成</strong></li><li> 如果条件中有and，<strong>自动去除</strong>，但不会自动加</li></ol><figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"search"</span> <span class="attr">resultMap</span>=<span class="string">"userResultMap"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  select * from user</span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"keyWord != null"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          user_name like CONCAT('%',#{keyWord},'%')</span><br><span class="line"></span><br><span class="line">            or nick_name like CONCAT('%',#{keyWord},'%')</span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"time != null"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        and  gmt_created &lt;![CDATA[ &gt;= ]]&gt; #{time}</span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="choose-when-otherwise">          <a href="#choose-when-otherwise" class="heading-link"><i class="fas fa-link"></i></a><a href="#choose-when-otherwise" class="headerlink" title="choose when otherwise"></a>choose when otherwise</h3>      <blockquote><p>这是一套标签，功能类似于if…else if…else if…else,也就是单条件查询只取其一</p></blockquote><p>when只取其中一个不会追加多个条件，如果有多个条件，只取最前面的那个，如果都不满足不查数据</p><figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBy"</span> <span class="attr">resultType</span>=<span class="string">"Users"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    select * from users</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"uid != 0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                uid=#{uid}</span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"username != null and username != ''"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                username = #{username}</span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"password != null and password != ''"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                password = #{password}</span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                city = #{city}</span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="bind">          <a href="#bind" class="heading-link"><i class="fas fa-link"></i></a><a href="#bind" class="headerlink" title="bind"></a>bind</h3>      <blockquote><p>对数据加工，可用于模糊查询</p></blockquote><figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--模糊查询方式一:使用bind标签对city中的数据作字符串拼接加工--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectLike"</span> <span class="attr">resultType</span>=<span class="string">"Users"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">value</span>=<span class="string">"'%'+city+'%'"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    select * from users where city like #{city}</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p>这里相当于在查询之前给city前后加了%，再进行模糊查询</p><p>也可以使用concat()函数进行字符串拼接</p><figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--模糊查询方式二--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectLike2"</span> <span class="attr">resultType</span>=<span class="string">"Users"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    select * from users where city like concat('%',#{city},'%')</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure>        <h2 id="MyBatis-XML-循环语句">          <a href="#MyBatis-XML-循环语句" class="heading-link"><i class="fas fa-link"></i></a><a href="#MyBatis-XML-循环语句" class="headerlink" title="MyBatis XML 循环语句"></a>MyBatis XML 循环语句</h2>      <blockquote><p><span class="exturl"><a class="exturl__link" href="https://so.csdn.net/so/search?q=MyBatis&amp;spm=1001.2101.3001.7020">MyBatis</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>很好的支持批量插入,使用foreach即可满足</p></blockquote><p>首先创建DAO方法</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">batchAdd</span><span class="params">(<span class="meta">@Param("list")</span> List&lt;UserDO&gt; userDOs)</span>;</span><br></pre></td></tr></tbody></table></div></figure><p>配置XML</p><figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"batchAdd"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    INSERT INTO user (user_name, pwd, nick_name,avatar,gmt_created,gmt_modified)</span><br><span class="line"></span><br><span class="line">    VALUES</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"it"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">separator</span> =<span class="string">","</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        (#{it.userName}, #{it.pwd}, #{it.nickName}, #{it.avatar},now(),now())</span><br><span class="line"></span><br><span class="line">    &lt;/foreach &gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p><span class="exturl"><a class="exturl__link" href="https://so.csdn.net/so/search?q=foreach&amp;spm=1001.2101.3001.7020">foreach</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>相当于执行力java的for循环,他的属性:</p><ul><li>  collection指定集合的<strong>上下文参数名称</strong>比如这里的<code>@Param("list")</code></li></ul><!----><ul><li>  item指定遍历的每一个数据的变量,一般叫it,可以使用<code>it.userName</code>来获取具体的值</li></ul><!----><ul><li>  index集合的索引值,从0开始</li></ul><!----><ul><li>  separator遍历每条记录并添加分隔符</li></ul><p><strong>除了批量插入,使用SQL in查询多个用户时也会使用:</strong></p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; <span class="title function_">findByIds</span><span class="params">(<span class="meta">@Param("ids")</span> List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIds"</span> <span class="attr">resultMap</span>=<span class="string">"userResultMap"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    select * from user</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        id in</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">collection</span>=<span class="string">"ids"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                    <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            #{item}</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><ul><li>  open: 表示的是节点开始时自定义的分隔符</li><li>  close: 表示是节点结束时自定义的分隔符</li></ul><blockquote><p>执行后：select * from user where id in (?,?,?)</p></blockquote>        <h2 id="多表关联查询">          <a href="#多表关联查询" class="heading-link"><i class="fas fa-link"></i></a><a href="#多表关联查询" class="headerlink" title="多表关联查询"></a>多表关联查询</h2>              <h3 id="业务装配实现多表查询">          <a href="#业务装配实现多表查询" class="heading-link"><i class="fas fa-link"></i></a><a href="#业务装配实现多表查询" class="headerlink" title="业务装配实现多表查询"></a>业务装配实现多表查询</h3>      <blockquote><p>假设现有两表他们通过<code>cid</code>进行关联</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3278c639bd9046c9a485bb9954729d10~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f7bb42fbe4654cb2a26597be66e1bf42~tplv-k3u1fbpfcp-zoom-1.image"></p><p>调用mapper层，先查询所有学生，在根据班级信息手动进行组装，称之为业务装配。</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询学生的信息及其所在的班级信息</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findAll</span><span class="params">()</span>{</span><br><span class="line"></span><br><span class="line">       List&lt;Student&gt; students = studentMapper.findAll();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (Student stu: students) {</span><br><span class="line"></span><br><span class="line">           <span class="type">long</span> <span class="variable">cid</span> <span class="operator">=</span> stu.getCid();</span><br><span class="line"></span><br><span class="line">           <span class="type">Clazz</span> <span class="variable">clazz</span> <span class="operator">=</span> clazzMapper.fingByCid(cid);  <span class="comment">//手动转配</span></span><br><span class="line"></span><br><span class="line">           stu.setClazz(clazz); <span class="comment">//每个学生中都有班级信息了</span></span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       System.out.println(students);</span><br><span class="line"></span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="resultMap的N-1方式实现多表查询-多对一">          <a href="#resultMap的N-1方式实现多表查询-多对一" class="heading-link"><i class="fas fa-link"></i></a><a href="#resultMap的N-1方式实现多表查询-多对一" class="headerlink" title="resultMap的N+1方式实现多表查询 (多对一)"></a>resultMap的N+1方式实现多表查询 <strong>(多对一)</strong></h3>      <p>在中关联xml语句映射文件可以使用<code>package</code></p><figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.mybatis.mapper"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p>通过<code>&lt;resultMap&gt;</code>定义映射关系，并通过<code>&lt;association&gt;</code>指定对象属性的映射关系。</p><figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mybatis.mapper.StudentMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"studentResultMap"</span> <span class="attr">type</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"sid"</span> <span class="attr">column</span>=<span class="string">"sid"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--如果是外键pojo中的属性名与数据库中的列名一致,也不可以省略--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"sname"</span> <span class="attr">column</span>=<span class="string">"sname"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"age"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"cid"</span> <span class="attr">column</span>=<span class="string">"cid"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"clazz"</span> <span class="attr">select</span>=<span class="string">"com.mybatis.mapper.ClazzMapper.findByCid"</span> <span class="attr">javaType</span>=<span class="string">"Clazz"</span> <span class="attr">column</span>=<span class="string">"cid"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--如果是外键pojo中的属性名与数据库中的列名一致,也不可以省略--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"fingAll"</span> <span class="attr">resultMap</span>=<span class="string">"studentResultMap"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        select * from student</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><ul><li><p>  property是student类中持有的班级属性名</p></li><li><p>  select指定使用哪个查询语句</p></li><li><p>  javaType返回值类型</p></li><li><p>  column表示根据哪个列查</p></li></ul>        <h3 id="resultMap-的关联方式实现多表查询-多对一">          <a href="#resultMap-的关联方式实现多表查询-多对一" class="heading-link"><i class="fas fa-link"></i></a><a href="#resultMap-的关联方式实现多表查询-多对一" class="headerlink" title="resultMap 的关联方式实现多表查询(多对一)"></a>resultMap 的<strong>关联</strong>方式实现多表查询(多对一)</h3>      <figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mybatis.mapper.StudentMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"studentResultMap"</span> <span class="attr">type</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--无论pojo实体类中的属性名与数据库列名是否同名,都得写上映射关系--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"sid"</span> <span class="attr">column</span>=<span class="string">"sid"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"sname"</span> <span class="attr">column</span>=<span class="string">"sname"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"age"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"cid"</span> <span class="attr">column</span>=<span class="string">"cid"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"clazz"</span>  <span class="attr">javaType</span>=<span class="string">"Clazz"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--无论pojo实体类中的属性名与数据库列名是否同名,都得写上映射关系--&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"cid"</span> <span class="attr">column</span>=<span class="string">"cid"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"cname"</span> <span class="attr">column</span>=<span class="string">"cname"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"room"</span> <span class="attr">column</span>=<span class="string">"room"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span>        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"fingAll"</span> <span class="attr">resultMap</span>=<span class="string">"studentResultMap"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        select s.sid,s.sname,s.age,s.cid,c.cname,c.room from student s join clazz c on s.cid  = c.cid</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p>通过<resultmap>定义映射关系, 并通过<association>指定对象属性的映射关系. 可以把<association>看成一个<resultmap>使用. javaType 属性表示当前对象, 可以写全限定路径或别名.</resultmap></association></association></resultmap></p>        <h3 id="resultMap-的-N-1-方式实现多表查询-一对多">          <a href="#resultMap-的-N-1-方式实现多表查询-一对多" class="heading-link"><i class="fas fa-link"></i></a><a href="#resultMap-的-N-1-方式实现多表查询-一对多" class="headerlink" title="resultMap 的 N+1 方式实现多表查询 (一对多)"></a>resultMap 的 N+1 方式实现多表查询 <strong>(一对多)</strong></h3>      <p><strong>实体类：</strong></p><p>在班级类中定义一个学生集合, 用于存放该班级的所有学生信息.</p><p><code>ClassMapper</code>查询所有班级信息，</p><p><code>StudentMapper</code>根据班级编号查询学生信息，在</p><p><code>ClassMapper</code>中使用<code>&lt;collection&gt;</code>设置装配。</p><p><collection>用于关联一个集合</collection></p><ul><li><p>  property: 实体类属性</p></li><li><p>  select: 设定要继续引用的查询, namespace+id</p></li><li><p>  column： 查询时需要传递的列</p></li></ul><figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mybatis.mapper.ClazzDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"m1"</span> <span class="attr">type</span>=<span class="string">"Clazz"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--除了主键列之外,其他的同名列的映射关系可以省略--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"cid"</span> <span class="attr">column</span>=<span class="string">"cid"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">select</span>=<span class="string">"com.mybatis.mapper.StudentDao.selByCid"</span> <span class="attr">column</span>=<span class="string">"cid"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selBy"</span> <span class="attr">resultType</span>=<span class="string">"Clazz"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        select * from clazz where cname=#{param1}</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="resultMap-的关联方式实现多表查询-一对多">          <a href="#resultMap-的关联方式实现多表查询-一对多" class="heading-link"><i class="fas fa-link"></i></a><a href="#resultMap-的关联方式实现多表查询-一对多" class="headerlink" title="resultMap 的关联方式实现多表查询 (一对多)"></a>resultMap 的关联方式实现多表查询 <strong>(一对多)</strong></h3>      <ol><li> 在 ClazzMapper.xml 中定义多表连接查询 SQL 语句, 一次性查到需要的所有数据, 包括对应学生的信息。</li></ol><figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selBy2"</span> <span class="attr">resultMap</span>=<span class="string">"m2"</span>&gt;</span></span><br><span class="line">        select c.cid,c.cname,c.room,s.sid,s.sname,s.age from clazz c join student s on c.cid = s.cid where cname=#{param1}</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><ol start="2"><li> 通过<resultmap>定义映射关系, 并通过<collection>指定集合属性泛型的映射关系. 可以把<collection>看成一个<resultmap>使用. ofType 属性表示集合的泛型, 可以写全限定路径或别名.</resultmap></collection></collection></resultmap></li></ol><figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"m2"</span> <span class="attr">type</span>=<span class="string">"Clazz"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--属性名与数据库列的映射关系不能省略--&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"cid"</span> <span class="attr">column</span>=<span class="string">"cid"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"cname"</span> <span class="attr">column</span>=<span class="string">"cname"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"room"</span> <span class="attr">column</span>=<span class="string">"room"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--关联Student中的各属性;property是Clazz类中持有的属性名,javaType是集合的别名,ofType是集合的泛型类型--&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">javaType</span>=<span class="string">"list"</span> <span class="attr">ofType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">&lt;!--属性名与数据库列的映射关系不能省略--&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"sid"</span> <span class="attr">column</span>=<span class="string">"sid"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"sname"</span> <span class="attr">column</span>=<span class="string">"sname"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"age"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"cid"</span> <span class="attr">column</span>=<span class="string">"cid"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure>        <h2 id="MyBatis-进阶">          <a href="#MyBatis-进阶" class="heading-link"><i class="fas fa-link"></i></a><a href="#MyBatis-进阶" class="headerlink" title="MyBatis 进阶"></a>MyBatis 进阶</h2>      <blockquote><p>MyBatis可以通过插件来很好的支持分页查询,目前最成熟的方案是<code>pagehelper</code>这个第三方插件</p></blockquote><figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p>改造<code>UserController.getAll</code>方法:</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/users")</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;UserDO&gt; <span class="title function_">getAll</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置当前页数为1，以及每页3条记录</span></span><br><span class="line"></span><br><span class="line">        Page&lt;UserDO&gt; page = PageHelper.startPage(<span class="number">1</span>, <span class="number">3</span>).doSelectPage(() -&gt; userDAO.findAll());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> page.getResult();</span><br><span class="line"></span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>在<code>doSelectPage</code>lambda方法中执行查询方法,会自动执行分页逻辑,并返回分页对象Page</p></blockquote><p><code>startPage</code>第一个参数是<strong>指定页数</strong>,第二个参数是指定<strong>每页的记录数</strong></p><p>返回类型Page对象时MyBatis封装的分页模型,一般会额外封装一个通用的分页模型<code>Paging</code>用于处理返回值:</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.comment.model;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 分页模型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="meta">@Data</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Paging</span>&lt;R&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> {</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">522660448543880825L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * 页数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pageNum;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * 每页数量</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * 总页数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> totalPage;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * 总记录数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> totalCount;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * 集合数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;R&gt; data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Paging</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p><code>getAll</code>最后改为:</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/users")</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Paging&lt;UserDO&gt; <span class="title function_">getAll</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 设置当前页数为1，以及每页3条记录</span></span><br><span class="line"></span><br><span class="line">       Page&lt;UserDO&gt; page = PageHelper.startPage(<span class="number">1</span>, <span class="number">3</span>).doSelectPage(() -&gt; userDAO.findAll());</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Paging</span>&lt;&gt;(page.getPageNum(), page.getPageSize(), page.getPages(), page.getTotal(), page</span><br><span class="line"></span><br><span class="line">               .getResult());</span><br><span class="line"></span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> ssm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>并发编程</title>
      <link href="/2022/04/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/04/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Lambda表达式">          <a href="#Lambda表达式" class="heading-link"><i class="fas fa-link"></i></a><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2>      <blockquote><p>lambda表达式为Java8的新特性可以让代码更加简洁,易于阅读和维护</p></blockquote><p>基本结构：<code>f-&gt;{ }</code></p><p><img src="https://img-blog.csdnimg.cn/62af0b6942524673b45e9814ffe101d8.png" alt="在这里插入图片描述"></p><p>lambda表达式在功能上等同一个匿名方法，f变量的类型是<strong>系统自识别</strong>的,所以Lambda表达式要配合上下文,和其他方法配合使用,而<strong>不是一个独立的语句</strong>，等同于：</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(f)</span> {</span><br><span class="line">  System.out.println(f.getName());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p>举个栗子</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Animal&gt; animals = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">"Wolf"</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">"Dog"</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">"Cat"</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">"Cattle"</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">"Chicken"</span>)</span><br><span class="line">    );</span><br></pre></td></tr></tbody></table></div></figure><p>打印动物的名字：</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; animals.size(); i++) {</span><br><span class="line">  <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> animals.get(i);</span><br><span class="line">  System.out.println(a.getName());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p>使用Lambda：</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">animals.forEach(f-&gt;{</span><br><span class="line">      System.out.println(f.getName());</span><br><span class="line">    });</span><br></pre></td></tr></tbody></table></div></figure><p>Collections中sort()方法的排序功能,使用Lambda表达式优化</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; students = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student&gt;();</span><br><span class="line">students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">111</span>, <span class="string">"bbbb"</span>, <span class="string">"london"</span>));</span><br><span class="line">students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">131</span>, <span class="string">"aaaa"</span>, <span class="string">"nyc"</span>));</span><br><span class="line">students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">121</span>, <span class="string">"cccc"</span>, <span class="string">"jaipur"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现升序排序</span></span><br><span class="line">Collections.sort(students, (student1, student2) -&gt; {</span><br><span class="line">  <span class="comment">// 第一个参数的学号 vs 第二个参数的学号</span></span><br><span class="line">  <span class="keyword">return</span> student1.getRollNo() - student2.getRollNo();</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">students.forEach(s -&gt; System.out.println(s));</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="多参数">          <a href="#多参数" class="heading-link"><i class="fas fa-link"></i></a><a href="#多参数" class="headerlink" title="多参数"></a>多参数</h3>      <p>箭头(-&gt;)前表示参数变量，有多个参数的时候，必须使用小括号<code>(student1, student2) -&gt; {}</code></p>        <h3 id="无参数">          <a href="#无参数" class="heading-link"><i class="fas fa-link"></i></a><a href="#无参数" class="headerlink" title="无参数"></a>无参数</h3>      <p>箭头(-&gt;)前表示参数变量，没有参数的时候，必须使用小括号<code>() -&gt; {}</code></p>        <h3 id="单条执行语句">          <a href="#单条执行语句" class="heading-link"><i class="fas fa-link"></i></a><a href="#单条执行语句" class="headerlink" title="单条执行语句"></a>单条执行语句</h3>      <p>箭头后执行的语句只有一条时，可以不加{}<code>s -&gt; System.out.println(s);</code></p>        <h3 id="有类型参数使用">          <a href="#有类型参数使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#有类型参数使用" class="headerlink" title="有类型参数使用"></a>有类型参数使用</h3>      <figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">animals.forEach((Animal a) -&gt; {</span><br><span class="line">  System.out.println(a.getName());</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>Lambda表达式{ }内执行的代码还可以引用外部的变量</p></blockquote><ol><li>规范一：引用的局部变量<strong>不允许被修改</strong>,即使写在表达式后面也不行,因为Lambda表达式引用的局部变量具备final的特性,<strong>初始化后不允许被修改</strong></li><li>规范二：参数不能与局部变量同名</li></ol>        <h3 id="双冒号操作符">          <a href="#双冒号操作符" class="heading-link"><i class="fas fa-link"></i></a><a href="#双冒号操作符" class="headerlink" title="双冒号操作符"></a>双冒号操作符</h3>      <blockquote><p>双冒号<code>::</code>这是Lambda写法</p></blockquote><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">"zhangSan"</span>, <span class="string">"LiSi"</span>, <span class="string">"WangWu"</span>);</span><br><span class="line">names.forEach(n -&gt; {</span><br><span class="line">  System.out.println(n);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></div></figure><p>简化后：</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">names.forEach(System.out::println);</span><br></pre></td></tr></tbody></table></div></figure><p>使用<code>::</code>时，系统每次遍历取得的元素，会自动作为参数传递给<code>System.out.println()</code>方法打印输出；<code>System.out::println</code>等同于<code>n -&gt; {System.out.println(n);}</code></p><p><img src="https://img-blog.csdnimg.cn/7bc0e93f591d442e89988527becc53d9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTUzMjIzMg==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTUzMjIzMgpx;" alt="在这里插入图片描述"></p>        <h3 id="不同用法">          <a href="#不同用法" class="heading-link"><i class="fas fa-link"></i></a><a href="#不同用法" class="headerlink" title="不同用法"></a>不同用法</h3>              <h4 id="静态方法调用">          <a href="#静态方法调用" class="heading-link"><i class="fas fa-link"></i></a><a href="#静态方法调用" class="headerlink" title="静态方法调用"></a>静态方法调用</h4>      <p>则使用<code>LambdaTest::print</code>代替<code>f -&gt; LambdaTest.print(f)</code></p>        <h4 id="非静态方法调用">          <a href="#非静态方法调用" class="heading-link"><i class="fas fa-link"></i></a><a href="#非静态方法调用" class="headerlink" title="非静态方法调用"></a>非静态方法调用</h4>      <p><code>print()</code>方法不再标识为<code>static</code>，于是需要实例对象来调用</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animals.forEach(<span class="keyword">new</span> <span class="title class_">LambdaTest</span>()::print);</span><br></pre></td></tr></tbody></table></div></figure>        <h4 id="多参数-1">          <a href="#多参数-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#多参数-1" class="headerlink" title="多参数"></a>多参数</h4>      <figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(students, (student1, student2) -&gt; {</span><br><span class="line">  <span class="comment">// 第一个参数的学号 vs 第二个参数的学号</span></span><br><span class="line">  <span class="keyword">return</span> student1.getRollNo() - student2.getRollNo();</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></div></figure><p>如果遇到了多参数的情况，把比较过程定义成一个方法</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">compute</span><span class="params">(Student student1, Student student2)</span> {</span><br><span class="line"><span class="keyword">return</span> student1.getRollNo() - student2.getRollNo();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p>排序过程则可以简写为:</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(students, SortTest::compute);</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>系统会自动获取上下文的参数，按照定义的顺序传递指定的方法</p></blockquote><p><strong>案例如下：</strong></p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> no;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNo</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> no;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNo</span><span class="params">(<span class="type">int</span> no)</span> {</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> {</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> no, String name)</span> {</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student{"</span> +</span><br><span class="line">                <span class="string">"no="</span> + no +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> peiqi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/4/917:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        List&lt;Student&gt; students = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">111</span>, <span class="string">"bbbb"</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">131</span>, <span class="string">"aaaa"</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">121</span>, <span class="string">"cccc"</span>));</span><br><span class="line"></span><br><span class="line">        Collections.sort(students, LambdaDemo::compute);</span><br><span class="line">        students.forEach(System.out::println);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">compute</span><span class="params">(Student student1, Student student2)</span> {</span><br><span class="line">        <span class="keyword">return</span> student1.getNo() - student2.getNo();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p>执行结果：</p><p><img src="https://img-blog.csdnimg.cn/e3c8ac388d0e484b81e59ddeff82bad2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBALWlyb255LQ==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" style="width: image/watermark,type_d3F5LXplbmhlaQ,shadow_50,tepx;height: t_Q1NETiBALWlyb255LQpx;" alt="在这里插入图片描述"></p>        <h4 id="父类方法">          <a href="#父类方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#父类方法" class="headerlink" title="父类方法"></a>父类方法</h4>      <blockquote><p><code>::</code>语法也可以用super关键字调用父类的<strong>非静态方法</strong></p></blockquote><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest</span> <span class="keyword">extends</span> <span class="title class_">LambdaExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        List&lt;Student&gt; students = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>,<span class="string">"李华"</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">2</span>,<span class="string">"李雷"</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">3</span>,<span class="string">"小明"</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="type">LambdaTest</span> <span class="variable">at</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LambdaTest</span>();</span><br><span class="line">        at.print(students);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(List&lt;Student&gt; students)</span>{</span><br><span class="line">        students.forEach(<span class="built_in">super</span>::print);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LambdaExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(Student s)</span>{</span><br><span class="line">        System.out.println(s.getName());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure>        <h2 id="Stream-API">          <a href="#Stream-API" class="heading-link"><i class="fas fa-link"></i></a><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h2>      <blockquote><p><code>Stream</code>(流)主要优点是提升开发效率，使代码更加简洁干净，主要作用是对集合中的数据进行各种操作增强集合对象的功能</p></blockquote>        <h3 id="流迭代">          <a href="#流迭代" class="heading-link"><i class="fas fa-link"></i></a><a href="#流迭代" class="headerlink" title="流迭代"></a>流迭代</h3>              <h4 id="创建流">          <a href="#创建流" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建流" class="headerlink" title="创建流"></a>创建流</h4>      <ol><li>直接创建</li></ol><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"苹果"</span>, <span class="string">"哈密瓜"</span>, <span class="string">"香蕉"</span>, <span class="string">"西瓜"</span>, <span class="string">"火龙果"</span>);</span><br></pre></td></tr></tbody></table></div></figure><ol start="2"><li>由数组转化</li></ol><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] fruitArray = <span class="keyword">new</span> <span class="title class_">String</span>[] {<span class="string">"苹果"</span>, <span class="string">"哈密瓜"</span>, <span class="string">"香蕉"</span>, <span class="string">"西瓜"</span>, <span class="string">"火龙果"</span>};</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(fruitArray);</span><br></pre></td></tr></tbody></table></div></figure><ol start="3"><li>由集合创建</li></ol><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; fruits = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">fruits.add(<span class="string">"苹果"</span>);</span><br><span class="line">fruits.add(<span class="string">"哈密瓜"</span>);</span><br><span class="line">fruits.add(<span class="string">"香蕉"</span>);</span><br><span class="line">fruits.add(<span class="string">"西瓜"</span>);</span><br><span class="line">fruits.add(<span class="string">"火龙果"</span>);</span><br><span class="line">Stream&lt;String&gt; stream = fruits.stream();</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>流的迭代也是由foreach()方法但和集合中的foreach<strong>不一样</strong>(遍历数据是一样的)</p></blockquote>        <h3 id="流数据的过滤">          <a href="#流数据的过滤" class="heading-link"><i class="fas fa-link"></i></a><a href="#流数据的过滤" class="headerlink" title="流数据的过滤"></a>流数据的过滤</h3>              <h4 id="filter-方法">          <a href="#filter-方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#filter-方法" class="headerlink" title="filter() 方法"></a>filter() 方法</h4>      <blockquote><p>功能为对流中的数据进行过滤,方法参数是一个Lambda表达式,箭头后是条件语句,判断数据需要符合的条件也就是使用Lambda表达式告诉过滤器,需要那些符合条件的数据。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/4efa5e090ffe4d3cbb3edc4b6486f6f2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALWlyb255LQ==,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,tepx;height: t_Q1NETiBALWlyb255LQpx;" alt="在这里插入图片描述"></p><blockquote><p>比如过滤分数低于80分且无违规记录的学生</p></blockquote><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pupil</span> {</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 平均分</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> averageScore;</span><br><span class="line">    <span class="comment">// 违规次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> violationCount;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Pupil&gt; pupils = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 这里假设小学生数据对象已经存入了</span></span><br><span class="line">pupils.stream()</span><br><span class="line">    .filter(pupil -&gt; pupil.getAverageScore() &gt;= <span class="number">80</span> &amp;&amp; pupil.getViolationCount() &lt; <span class="number">1</span>)</span><br><span class="line">    .forEach(pupil -&gt; {System.out.println(pupil.getName());});</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>这里的Lambda表达式略有不同,因为是条件语句所以表达式放在()而不是{}中</p></blockquote>        <h3 id="流数据映射">          <a href="#流数据映射" class="heading-link"><i class="fas fa-link"></i></a><a href="#流数据映射" class="headerlink" title="流数据映射"></a>流数据映射</h3>      <blockquote><p>对于一组数字计算每个数字的平方数并输出</p></blockquote><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">        numbers.stream()</span><br><span class="line">                .map(num -&gt; num * num)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></div></figure><p><img src="https://img-blog.csdnimg.cn/dffa3919043844498a5e530568d3d5d5.png#pic_center" alt="在这里插入图片描述"></p><blockquote><p>流中的<code>map()</code>方法就是映射,作用是用<strong>新的元素</strong>替换掉<strong>原来相同位置的元素</strong>,相当于每个对象都经历过依次转换</p></blockquote><p><img src="https://img-blog.csdnimg.cn/ec70a9e84be24971a38f435eec9abcf6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALWlyb255LQ==,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,tepx;height: t_Q1NETiBALWlyb255LQpx;" alt="在这里插入图片描述"></p><p><code>map()</code>方法的参数是一个Lambda表达式,在语句块中对流中的每个数据进行计算处理,最后return返回的对象就是转换后的对象</p><p><img src="https://img-blog.csdnimg.cn/3011bb4612bc45509e682543ef89424a.png" alt="在这里插入图片描述"></p><blockquote><p>优点：映射后的对象类型可以与原始的不一致提供了灵活性和扩展性</p></blockquote>        <h3 id="流数据排序">          <a href="#流数据排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#流数据排序" class="headerlink" title="流数据排序"></a>流数据排序</h3>      <p>使用Stream API实现学生学号排序：</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; students = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student&gt;();</span><br><span class="line">students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">111</span>, <span class="string">"bbbb"</span>));</span><br><span class="line">students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">131</span>, <span class="string">"aaaa"</span>));</span><br><span class="line">students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">121</span>, <span class="string">"cccc"</span>));</span><br><span class="line"></span><br><span class="line">students.stream()</span><br><span class="line">    <span class="comment">// 实现升序排序</span></span><br><span class="line">    .sorted((student1, student2) -&gt; {</span><br><span class="line">        <span class="keyword">return</span> student1.getNo() - student2.getNo();</span><br><span class="line">    })</span><br><span class="line">    .forEach(System.out::println);</span><br><span class="line"></span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>这里的<code>student1</code>指的是后一个元素,<code>student2</code>是前一个元素</p></blockquote>        <h3 id="流数据的摘取">          <a href="#流数据的摘取" class="heading-link"><i class="fas fa-link"></i></a><a href="#流数据的摘取" class="headerlink" title="流数据的摘取"></a>流数据的摘取</h3>      <blockquote><p>对于一组数字，找出最大的前3个数字</p></blockquote><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">63</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">        numbers.stream()</span><br><span class="line">                .sorted((n1, n2) -&gt; n2 - n1)</span><br><span class="line">                .limit(<span class="number">3</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></div></figure><p><img src="https://img-blog.csdnimg.cn/b6a001381720477b9a52f182a279c551.png" alt="img"></p><blockquote><p><code>limit()</code>方法的作用就是返回流前n个元素,n不能为负数</p></blockquote>        <h3 id="流的设计思想">          <a href="#流的设计思想" class="heading-link"><i class="fas fa-link"></i></a><a href="#流的设计思想" class="headerlink" title="流的设计思想"></a>流的设计思想</h3>      <p>数据流的操作过程可以看做一个管道,管道由多个节点组成,每个节点完成一个操作,数据流输入这个管道,按照顺序经过各个节点</p><p><img src="https://img-blog.csdnimg.cn/bbc4777267ad4c5f8a1e88d48b5a69a3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALWlyb255LQ==,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,tepx;height: t_Q1NETiBALWlyb255LQpx;" alt="在这里插入图片描述">Stream的显著特点是:编程的重点不再是对象的运用而是<strong>数据的计算</strong>,Stream的特征为:函数式风格,弱化了面向对象的严格,完整的语法重心变为通过函数完成数据计算</p><p><img src="https://img-blog.csdnimg.cn/cbf4ab981c66480cbbe82b5545d75bec.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALWlyb255LQ==,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,tepx;height: t_Q1NETiBALWlyb255LQpx;" alt="在这里插入图片描述"></p>        <h2 id="并行数据">          <a href="#并行数据" class="heading-link"><i class="fas fa-link"></i></a><a href="#并行数据" class="headerlink" title="并行数据"></a>并行数据</h2>              <h3 id="流合并">          <a href="#流合并" class="heading-link"><i class="fas fa-link"></i></a><a href="#流合并" class="headerlink" title="流合并"></a>流合并</h3>      <blockquote><p>对1-10的十个正整数求和:</p></blockquote><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> numbers.stream()</span><br><span class="line">    .reduce((a, b) -&gt; a + b)</span><br><span class="line">    .get();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"1-10求和 : "</span> + sum);</span><br></pre></td></tr></tbody></table></div></figure><p><code>reduce()</code>方法的作用是<strong>合并了所有元素</strong>终止计算出一个结果,这里的终止就是流已经到达终点结束了。</p><blockquote><p><code>reduce()</code>方法的返回值是一个比较复杂的对象，需要调用<code>get()</code>方法返回最终的整数值</p></blockquote><p><code>reduce()</code>方法的参数：</p><ul><li>方法参数a在第一次执行计算语句时,指代流的<strong>第一个元素</strong>,然后充当<strong>缓存作用</strong>存放本次计算结果,此后执行计算语句时,a就是<strong>上一次的计算结果</strong>并继续充当缓存存放本次计算结果</li><li>b第一次执行是指代<strong>第二个元素</strong>,此后依次指代<strong>流的每个元素</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/ae7f01336f4a4104bea70d036cbe522f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALWlyb255LQ==,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,tepx;height: t_Q1NETiBALWlyb255LQpx;" alt="在这里插入图片描述"></p><blockquote><p>a,b两个参数作用是由位置决定的，变量名是任意的</p></blockquote><p><code>reduce()</code>方法还可以操作对象,但第一个对象会充当缓存角色,正确性被破坏了,所以可以自己<code>new</code>一个对象充当缓存角色而不是使用流中的原始对象:</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">result</span> <span class="operator">=</span> students.stream()</span><br><span class="line">    .reduce(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">""</span>, <span class="number">0</span>),</span><br><span class="line">        (a, b) -&gt; {</span><br><span class="line">            a.setMidtermScore(a.getMidtermScore() + b.getMidtermScore());</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        }</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">System.out.println(result.getName() + <span class="string">" - "</span> + result.getMidtermScore());</span><br></pre></td></tr></tbody></table></div></figure><p>这样<code>reduce()</code>方法参数变成了2个：</p><ul><li>第一个参数,是作为缓存角色的对象</li><li>第二个参数,是Lambda表达式完成计算<ul><li>此时a变量不在是指代流中第一个元素了,专门指代缓存角色的对象(即第一个<code>new</code>的对象)</li><li>b依次指代<strong>流的每个元素</strong>(包括第一个)</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/3fa2018b18c34010b930ec3dc546567e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALWlyb255LQ==,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,tepx;height: t_Q1NETiBALWlyb255LQpx;" alt="在这里插入图片描述"></p><blockquote><p>reduce()返回值变为了缓存角色的对象即第一个参数,也不再需要使用<code>get()</code></p></blockquote>        <h3 id="流收集">          <a href="#流收集" class="heading-link"><i class="fas fa-link"></i></a><a href="#流收集" class="headerlink" title="流收集"></a>流收集</h3>      <blockquote><p>对一组数字找出前三个数字放入一个新的集合中,用<code>-</code>组合成字符串打印</p></blockquote><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">63</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">        List&lt;String&gt; numResult = numbers.stream()</span><br><span class="line">                .sorted((n1, n2) -&gt; n2 - n1)</span><br><span class="line">                .limit(<span class="number">3</span>)</span><br><span class="line">                .map(a -&gt; <span class="string">""</span> + a)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> String.join(<span class="string">"-"</span>, numResult);</span><br><span class="line">        System.out.println(<span class="string">"字符串是: "</span> + string);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></div></figure><p><code>collect()</code>方法作用就是收集元素,<code>Collectors.toList()</code>将元素存入List集合,所以返回值就是List类型,这里<code>map()</code>将整数映射成字符串,所以<code>collect()</code>方法返回类型就是<code>List&lt;String&gt;</code></p><blockquote><p><code>java.util.stream.Collectors</code>是流工具包中提供的收集器</p></blockquote>        <h3 id="并行流">          <a href="#并行流" class="heading-link"><i class="fas fa-link"></i></a><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h3>      <p><code>Stream API</code>的设计类似于管道,管道的显著特点就是<strong>每个节点依次执行</strong>,下一个节点必须等待上一个节点执行完毕,这种执行方式一般叫做<strong>串行</strong>。</p><blockquote><p>如果计算过程越来越复杂，数据量越来越大，串行的效率就会越来越低，这种模式无法发挥多核CPU的优势</p></blockquote><p>所以可以把串行计算模式改为并行计算模式,并行就是利用多线程变成同时执行,多线程可以充分发掘多核CPU的优势。</p><p>使用并行流的方法就是调用<code>parallelStream()</code>即可</p><p><img src="https://img-blog.csdnimg.cn/625881476c8e456bbecff5a7c7aef323.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALWlyb255LQ==,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,tepx;height: t_Q1NETiBALWlyb255LQpx;" alt="在这里插入图片描述"></p>        <h3 id="并行流的性能意外">          <a href="#并行流的性能意外" class="heading-link"><i class="fas fa-link"></i></a><a href="#并行流的性能意外" class="headerlink" title="并行流的性能意外"></a>并行流的性能意外</h3>      <blockquote><p> 由于并行计算使用了多线程,线程输出的时机有CPU动态决定的,无法确定，所以当流中的每个数据元素之间有逻辑依赖关系时,不适合使用并行计算。</p></blockquote><p>并行计算模式的性能不是任何情况都优于串行模式</p><ul><li>硬件太差：CPU核数很低时并行计算模式不一定更好</li><li>任务简单：数据量小任务简单,并行模式的多线程管理会消耗CPU内存等资源</li></ul>        <h2 id="常用设计模式">          <a href="#常用设计模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#常用设计模式" class="headerlink" title="常用设计模式"></a>常用设计模式</h2>      <blockquote><p>学习设计模式有助于提升代码质量(重用代码，易阅读，易维护，可靠性，扩展性等)，也有助于提升设计能力</p></blockquote>        <h3 id="单例模式">          <a href="#单例模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3>      <blockquote><p>保证一个类仅有一个实例，比如现实生活中地球只有他一个，核心办法就是把构造方法设置为私有的，只有自己才能实例化自己</p></blockquote><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> peiqi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/4/118:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Earth</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> area;</span><br><span class="line">    <span class="keyword">private</span> String radius;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//唯一实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Earth</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Earth</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Earth</span><span class="params">()</span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部类可以通过这个方法访问唯一的实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Earth <span class="title function_">getInstance</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>必须使用<code>static</code>修饰符，否则会造成死递归的错误</p></blockquote><p><img src="https://img-blog.csdnimg.cn/e191e54fb0774f93ab5b72062615822f.png" alt="在这里插入图片描述"></p>        <h4 id="饿汉与懒汉模式">          <a href="#饿汉与懒汉模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#饿汉与懒汉模式" class="headerlink" title="饿汉与懒汉模式"></a>饿汉与懒汉模式</h4>      <ol><li>饿汉式单例:在定义开始便实例自己</li></ol><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singer</span>{</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singler</span> <span class="variable">singler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singler</span>();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="title function_">Singler</span><span class="params">()</span>{}</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Singler <span class="title function_">instance</span><span class="params">()</span>{</span><br><span class="line">     <span class="keyword">return</span> singler;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></div></figure><ol start="2"><li>懒汉单例:在第一次调用时实例化自己</li></ol><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singer</span>{</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singler</span> <span class="variable">singler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="title function_">Singler</span><span class="params">()</span>{}</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Singler <span class="title function_">instance</span><span class="params">()</span>{</span><br><span class="line">     <span class="keyword">if</span>(singler==<span class="literal">null</span>){</span><br><span class="line">        singler = <span class="keyword">new</span> <span class="title class_">Singler</span>()</span><br><span class="line">     }</span><br><span class="line">     <span class="keyword">return</span> singler;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></div></figure><p>区别：</p><ul><li>线程安全：<ul><li>饿汉式天生线程安全，可以直接用于多线程而不会出现问题。</li><li>懒汉式本身非线程安全，需要人为实现线程安全。</li></ul></li><li>资源加载和性能:<ul><li>饿汉式在类创建的同时就实例化一个静态对象出来，不管之后会不会使用这个单例，都会占据一定的内存，造成内存泄漏，但相应的，在第一次调用时速度也会更快。</li><li>而懒汉式顾名思义，会延迟加载，在第一次使用该单例的时候才会实例化对象出来，第一次调用时要做初始化，如果要做的工作比较多，性能上会有些延迟，之后就和饿汉式一样了。</li></ul></li></ul><blockquote><p>有时候从技术角度出发为了节省系统资源时，也会使用单例模式，比如在spring任何自动注入实例对象,默认只有一个实例对象</p></blockquote>        <h3 id="简单工厂模式">          <a href="#简单工厂模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3>      <blockquote><p>程序中的工厂是<strong>生产实例对象</strong>的地方</p></blockquote><p>为了实现不同条件创建不同对象的需求,核心问题是:</p><ol><li>减少代码重复,减少相同逻辑代码</li><li>降低耦合紧密,减少代码之间的相互影响</li></ol><p>实现简单工厂:</p><ol><li>从具体的产品类抽象出接口,java面向接口编程,所以工厂应该生产一种产品而不是一个产品</li><li>把生产实例对象的过程收敛到工厂类中实现</li></ol><p><strong>UML图</strong></p><p><img src="https://style.youkeda.com/img/ham/course/j5/j5-4-3-2.svg" alt="img"></p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FruitFactory</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title function_">getFruit</span><span class="params">(Customer customer)</span> {</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"sweet"</span>.equals(customer.getFlavor())) {</span><br><span class="line">            fruit = <span class="keyword">new</span> <span class="title class_">Watermelon</span>();</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"acid"</span>.equals(customer.getFlavor())) {</span><br><span class="line">            fruit = <span class="keyword">new</span> <span class="title class_">Lemon</span>();</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"smelly"</span>.equals(customer.getFlavor())) {</span><br><span class="line">            fruit = <span class="keyword">new</span> <span class="title class_">Durian</span>();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fruit;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p>工厂主要的优点在于职责明确,餐馆和甜品店只需要告诉工厂口味,就可以获得工厂的水果,但又不需要知道具体是什么水果，一般工厂命名为<code>XXXFactory</code>,这样的辨识度较高易于理解，重点在于明确什么条件下创建什么实例对象。</p>        <h3 id="抽象工厂模式">          <a href="#抽象工厂模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3>      <blockquote><p>对于一批,多种类型的对象需要创建时,使用抽象工厂模式,简单工厂主要是把多个产品抽象,使用一个工厂统一创建,抽象工厂则是把多个工厂进一步抽象</p></blockquote><p><strong>UML图</strong></p><p><img src="https://img-blog.csdnimg.cn/5ccd137a2baf45e193ac32e6851c1dde.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALWlyb255LQ==,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,tepx;height: t_Q1NETiBALWlyb255LQpx;" alt="在这里插入图片描述"></p><blockquote><p>就是进一步抽象工厂接口(SnackFactory)多出一个<code>SnacksFactoryBuilder</code></p></blockquote><ol><li>工厂的接口</li></ol><blockquote><p>规定工厂应该提供什么样的产品,包含了所有工厂的方法</p></blockquote><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SnacksFactory</span> {</span><br><span class="line">    <span class="comment">// 取得水果</span></span><br><span class="line">    <span class="keyword">public</span> Fruit <span class="title function_">getFruit</span><span class="params">(Customer customer)</span>;</span><br><span class="line">    <span class="comment">// 取得饮料</span></span><br><span class="line">    <span class="keyword">public</span> Drink <span class="title function_">getDrink</span><span class="params">(Customer customer)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FruitFactory</span> <span class="keyword">implements</span> <span class="title class_">SnacksFactory</span> {</span><br><span class="line">    <span class="keyword">public</span> Fruit <span class="title function_">getFruit</span><span class="params">(Customer customer)</span> {</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"sweet"</span>.equals(customer.getFlavor())) {</span><br><span class="line">            fruit = <span class="keyword">new</span> <span class="title class_">Watermelon</span>();</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"acid"</span>.equals(customer.getFlavor())) {</span><br><span class="line">            fruit = <span class="keyword">new</span> <span class="title class_">Lemon</span>();</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"smelly"</span>.equals(customer.getFlavor())) {</span><br><span class="line">            fruit = <span class="keyword">new</span> <span class="title class_">Durian</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> fruit;</span><br><span class="line">    }</span><br><span class="line"><span class="comment">//水果工厂不提供饮料</span></span><br><span class="line">    <span class="keyword">public</span> Drink <span class="title function_">getDrink</span><span class="params">(Customer customer)</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><ol start="2"><li>工厂的工厂</li></ol><blockquote><p>工厂用来生成产品实例,生产工厂的工厂用于<strong>生成工厂实例</strong></p></blockquote><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SnacksFactoryBuilder</span> {</span><br><span class="line">    <span class="keyword">public</span> SnacksFactory <span class="title function_">buildFactory</span><span class="params">(String choice)</span> {</span><br><span class="line">        <span class="keyword">if</span> (choice.equalsIgnoreCase(<span class="string">"fruit"</span>)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FruitFactory</span>();</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (choice.equalsIgnoreCase(<span class="string">"drink"</span>)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DrinkFactory</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></div></figure><blockquote><p><code>SnacksFactoryBuilder</code>的<code>buildFactory()</code>方法并不是<code>static</code>的,在复杂场景下尽量不要使用static方法</p></blockquote>        <h3 id="工厂模式结合spring工程">          <a href="#工厂模式结合spring工程" class="heading-link"><i class="fas fa-link"></i></a><a href="#工厂模式结合spring工程" class="headerlink" title="工厂模式结合spring工程"></a>工厂模式结合spring工程</h3>      <p>在工厂中减少定义<code>static</code>方法是为了在使用Spring框架时,可以为<code>FactoryBuilder</code>加上<code>@Component</code>注解让框架管理实例,同样任何需要使用工厂的地方只需要使用<code>@Autowired</code>注解让框架自动注入实例即可,这样可以让工厂模式的代码与Spring互为一体,扩展性更好,易于维护。</p>        <h3 id="观察者模式">          <a href="#观察者模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3>      <blockquote><p>订阅和通知这种场景比较适合观察者模式</p></blockquote><p>把需要观察的对象类也就是会改变的类继承<code>Observable</code>类,继承了就表示是核心的,需要观察的类和以往的模型设计不一样,需要观察的类要去掉全部属性的<code>setter</code>方法。</p><p>Observable提供的<code>setChanged()</code>方法就是标记被观察者对象发送了变化,<code>notifyObservers()</code>就是发出通知，接受通知的类就叫做观察者,观察者需要实现<code>Observer</code>接口,表示为观察者</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Observable o, Object arg)</span> {</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><ol><li>第一个参数就是被观察者对象</li><li>第二个参数就是额外的信息,具体就是调用<code>super.notifyObservers()</code>是传入的参数对象,传入什么对象,arg的值就是什么对象</li></ol><blockquote><p>update()方法的作用就是接受通知,系统在super.notifyObservers()发出通知后,及调用了所有的观察者的update()方法</p></blockquote><p><img src="https://img-blog.csdnimg.cn/c6c781c2c571469da268f0b6d91d23f0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALWlyb255LQ==,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,tepx;height: t_Q1NETiBALWlyb255LQpx;" alt="在这里插入图片描述"></p>        <h2 id="并发编程">          <a href="#并发编程" class="heading-link"><i class="fas fa-link"></i></a><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2>      <blockquote><p>学习<span class="exturl"><a class="exturl__link" href="https://so.csdn.net/so/search?q=%E5%A4%9A%E7%BA%BF%E7%A8%8B&amp;spm=1001.2101.3001.7020">多线程</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>是为了更好的优化程序，提升程序整体的运行效率</p></blockquote>        <h3 id="继承Thread类">          <a href="#继承Thread类" class="heading-link"><i class="fas fa-link"></i></a><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3>      <blockquote><p>继承Java的Thread类实现线程类，需要重写父类的run()方法</p></blockquote><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            System.out.println(getName() + <span class="string">" 开始取钱"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        System.out.println(getName() + <span class="string">" 取钱完毕"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p>线程类的作用就是完成一段相对独立的任务，这里使用<code>Thread.sleep(200)</code>模拟取钱的过程。sleep()方法就是要线程睡眠，暂时不再继续执行交出CPU，让CPU去执行其他的任务，<code>sleep</code>方法参数是毫秒数</p>        <h4 id="运行线程">          <a href="#运行线程" class="heading-link"><i class="fas fa-link"></i></a><a href="#运行线程" class="headerlink" title="运行线程"></a>运行线程</h4>      <blockquote><p>线程需要调用<code>start()</code>方法才能启动</p></blockquote><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bank</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Person</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        thread1.setName(<span class="string">"张三"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        thread2.setName(<span class="string">"李四"</span>);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p><img src="https://style.youkeda.com/img/ham/course/j5/j5-5-2-1.svg" alt="img"></p><p>Thread父类中有name属性，但是是private，所以可以调用<code>setName()</code>方法为线程设置名字，通过<code>getName()</code>就知道是哪个线程在运行</p><blockquote><p>线程类的run()方法是系统调用<code>start()</code>后执行的，编程不需要调用run方法但无法知道系统啥时候调用</p></blockquote>        <h3 id="实现Runnable接口">          <a href="#实现Runnable接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3>      <blockquote><p>由于Java是单继承，继承了Thread类后程序可扩展性大大降低所以优先考虑实现<code>java.lang.Runnable</code></p></blockquote><p><strong>张三李四去取钱</strong></p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> {</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> {</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            System.out.println(name + <span class="string">" 开始取钱"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        System.out.println(name + <span class="string">" 取钱完毕"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>无论是Runnable接口还是Thread类，run()方法都是系统适时自动执行的,实现了Runnable接口的线程类，还需要包装到<code>Thread</code>类的实例中</p></blockquote><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Bank {</span><br><span class="line">    public static void main(String[] args) {</span><br><span class="line">        Person person1 = new Person();</span><br><span class="line">        person1.setName("张三");</span><br><span class="line">        Thread thread1 = new Thread(person1);</span><br><span class="line"></span><br><span class="line">        Person person2 = new Person();</span><br><span class="line">        person2.setName("李四");</span><br><span class="line">        Thread thread2 = new Thread(person2);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p><img src="https://img-blog.csdnimg.cn/a282aa7de71d4f1f8a47d3774e9102d2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBALWlyb255LQ==,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_d3F5LXplbmhlaQ,shadow_50,tepx;height: t_Q1NETiBALWlyb255LQpx;" alt="在这里插入图片描述"></p><p>Thread实例<code>(new Thread(person1))</code>相当于调度器，触发线程任务执行，任务是不能自己启动的，需要调度</p><p><img src="https://img-blog.csdnimg.cn/bd5ad2a1612a4f7a828b6bb9b09ea702.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALWlyb255LQ==,size_15,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,tepx;height: t_Q1NETiBALWlyb255LQpx;" alt="在这里插入图片描述"></p>        <h3 id="线程安全">          <a href="#线程安全" class="heading-link"><i class="fas fa-link"></i></a><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3>      <p><strong>车票类</strong></p><blockquote><p>车票类的主要作用是控制车票的总数，每卖一次，票数减一</p></blockquote><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ticket</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) {</span><br><span class="line">            count--;</span><br><span class="line">        }</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"：卖出一张，还剩下 "</span> + count + <span class="string">" 张票"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p><code>Thread.currentThread()</code>返回当前正在运行的线程的实例对象。</p></blockquote><p><strong>售票窗口类</strong></p><blockquote><p>售票窗口就是线程类，以多线程的方式售票。售票简单来说就是循环减一即可。当然了，票数为·的时候不能再售卖了。这里假定打印票据需要点时间，售卖一张票休息100毫秒。</p></blockquote><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TicketWindow</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> {</span><br><span class="line">    <span class="keyword">private</span> Ticket ticket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TicketWindow</span><span class="params">(Ticket ticket)</span> {</span><br><span class="line">        <span class="built_in">this</span>.ticket = ticket;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">while</span> (ticket.getCount() &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                ticket.sell();</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p><strong>火车站类</strong></p><blockquote><p>火车站有4个窗口所以启动4个线程</p></blockquote><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainStation</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Ticket</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) {</span><br><span class="line">            <span class="type">TicketWindow</span> <span class="variable">office</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketWindow</span>(ticket);</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(office);</span><br><span class="line">            thread.setName(<span class="string">"售票窗口"</span> + i);</span><br><span class="line">            thread.start();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>此时运行代码会发现问题，余量错乱甚至相同</p></blockquote><p><img src="https://img-blog.csdnimg.cn/dcbc45092b4741ab95373db3061408aa.png" alt="在这里插入图片描述"></p><blockquote><p>问题分析：这种多个线程运行同一个实例对象(ticket)的情况下，修改了同一个变量（调用sel1()方法同时执行count–语句），后果是不可预料的。所以会出现余量打印错乱甚至相同的情况。</p></blockquote><p><img src="https://style.youkeda.com/img/ham/course/j5/j5-5-4-2.svg" alt="j5-5-4-2.svg"></p><p><strong>解决办法</strong></p><blockquote><p>多个线程操作同一个资源的时候，发生了冲突的现象，叫做线程不安全</p></blockquote><p>在Java中使用<code>synchronized</code>关键字来解决余量错乱的问题：</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> peiqi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/4/119:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ticket</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) {</span><br><span class="line">            count--;</span><br><span class="line">        }</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"：卖出一张，还剩下 "</span> + count + <span class="string">" 张票"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p><code>synchronized</code>也叫<strong>线程同步锁</strong>，表示此方法是锁定的，同一时刻只能由一个线程执行此方法，线程一次都在等待竞争下一个锁,<code>synchronized</code>相当于保护了关键方法，不允许同时执行，必须一个执行</p><p><img src="https://style.youkeda.com/img/ham/course/j5/j5-5-4-1.svg" alt="img"></p>        <h4 id="synchronized使用场景">          <a href="#synchronized使用场景" class="heading-link"><i class="fas fa-link"></i></a><a href="#synchronized使用场景" class="headerlink" title="synchronized使用场景"></a>synchronized使用场景</h4>      <p>使用synchronized的方法意味着满足了两个线程的安全的特性:</p><ul><li>原子性:方法全部执行并且执行的过程不会被任何的因素打断</li><li>可见性:当多个线程访问同一个变量时,一个线程修改了这个变量的值,其他线程能够立即看到修改的值</li></ul><p>synchronized使用场景:</p><ul><li>写操作的场景,如修改个人信息,点赞,收藏,下单等</li><li>尽量精确锁住最小的代码块,把最关键的写操作抽象成独立的方法加锁</li></ul>        <h3 id="悲观锁和乐观锁">          <a href="#悲观锁和乐观锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#悲观锁和乐观锁" class="headerlink" title="悲观锁和乐观锁"></a>悲观锁和乐观锁</h3>      <p><code>java.util.concurrent</code>是java系统提供的并发编程包，使用<code>java.util.concurrent.atomic.AtomicInteger</code>解决车票余量问题</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ticket</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">newCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (count.get() &gt; <span class="number">0</span>) {</span><br><span class="line">            newCount = count.decrementAndGet();</span><br><span class="line">        }</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"：还剩下 "</span> + newCount + <span class="string">" 张票"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> count.get();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p>此时<code>sell()</code>不再加锁，解决了车票余量重复的问题，<code>AtomicInteger</code> 虽然是一个类，但等同于一个整数（就像 Integer 是 int 的对象）。</p><blockquote><p><code>AtomicInteger</code>提供了不使用<code>synchronized</code>就可以保证数据操作的原子方法，如<code>decrementAndGet()</code>:</p></blockquote><p><img src="https://img-blog.csdnimg.cn/8f0d5152c4e644bbba66b21276efe01c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALWlyb255LQ==,size_12,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,tepx;height: t_Q1NETiBALWlyb255LQpx;" alt="在这里插入图片描述"></p><p>他是三个操作的组合,多线程情况下也不会出现数值重复的错误,保证了数据的正确性，这就是原子性的含义。</p><blockquote><p>线程间都是基于最新结果进行减一的运算,所以不会重复,这样是<strong>可见性</strong>的体现</p></blockquote><p>但因为sell方法不加锁多条语句执行时可能<strong>被其他的线程打断</strong>,所以要给sell()整体加上<code>synchronized</code>才能保证多条语句整体的原子性。</p>        <h4 id="AtomicInteger特点">          <a href="#AtomicInteger特点" class="heading-link"><i class="fas fa-link"></i></a><a href="#AtomicInteger特点" class="headerlink" title="AtomicInteger特点"></a>AtomicInteger特点</h4>      <blockquote><p><code>incrementAndGet()</code>和<code>decrementAndGet()</code>都没有加<code>synchronized</code></p></blockquote><p>这就意味着，递增、递减等方法虽然也是多个步骤，但多线程场景下，其它线程不会等待。只是在数据变化的时候，会判断一下是否有其它线程修改了数据，如果有就根据最新的值进行修改。这就是乐观锁。</p>        <h4 id="乐观锁">          <a href="#乐观锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4>      <p><strong>乐观锁</strong>就是不上锁,总是保证<strong>基于最新的数据进行更新</strong>,由于没有上锁,就提高了性能,如<code>AtomicInteger</code>类的<code>incrementAndGet()</code>和<code>decrementAndGet()</code>方法就乐观锁</p><p><strong>不适用于</strong>多条数据需要修改,以及多个操作的整体顺序要求很严格的场景,乐观锁适用于<strong>读数据</strong>比重更大的应用场景.</p>        <h4 id="悲观锁">          <a href="#悲观锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4>      <p>假设其他线程一定会修改数据,所以提前提防,上锁的思想是悲观的所以称之为<strong>悲观锁</strong></p><p>适用于<strong>写数据</strong>比重更大的应用场景.</p>        <h3 id="并发容器">          <a href="#并发容器" class="heading-link"><i class="fas fa-link"></i></a><a href="#并发容器" class="headerlink" title="并发容器"></a>并发容器</h3>      <blockquote><p>场景：多个任务有前后的顺序，但后继任务<strong>不必等待所有</strong>前置的任务全部完成后在执行，而是每个前置任务完成后，自动执行对应的后继任务,在这种场景下适合用<code>CompletableFuture</code>特性来解决</p></blockquote>        <h4 id="CompletableFuture">          <a href="#CompletableFuture" class="heading-link"><i class="fas fa-link"></i></a><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h4>      <blockquote><p>方法调用时，需要等待返回取得返回值就是同步，不等待而继续执行任务就是异步。采取异步方式能够支持多个任务并行执行，这种机制称为并发</p></blockquote><p><img src="https://style.youkeda.com/img/ham/course/j5/j5-5-6-2.svg" alt="img"></p><ol><li>Register类重构，不必实现多线程接口</li></ol><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Register</span> {</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">AtomicInteger</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注册学号</span></span><br><span class="line">  <span class="keyword">public</span> Student <span class="title function_">regId</span><span class="params">(Student student)</span> {</span><br><span class="line">    student.setId(count.incrementAndGet());</span><br><span class="line">    <span class="keyword">return</span> student;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><ol start="2"><li>并行注册</li></ol><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentIDTest</span> {</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">    <span class="comment">// 构建学生集合</span></span><br><span class="line">    List&lt;Student&gt; studentList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) {</span><br><span class="line">      <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">      s.setName(<span class="string">"学生"</span> + i);</span><br><span class="line">      studentList.add(s);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">Register</span> <span class="variable">reg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Register</span>();</span><br><span class="line"></span><br><span class="line">    studentList.forEach(s -&gt; {</span><br><span class="line">      CompletableFuture.supplyAsync(</span><br><span class="line">          <span class="comment">// 每个学生都注册学号</span></span><br><span class="line">          () -&gt; reg.regId(s)</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">// 学号注册完毕后，打印欢迎消息</span></span><br><span class="line">        .thenAccept(student -&gt; {</span><br><span class="line">          System.out.println(<span class="string">"你好 "</span> + student.getName());</span><br><span class="line">        });</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"mission complate"</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><ul><li><code>CompletableFuture.supplyAsync()</code>方法运行一个<strong>异步</strong>任务并返回结果，所以里面的方法必须要有返回值</li><li><code>supplyAsync()</code>方法参数的整个<code>() -&gt; reg.regId(s)</code>表达式语句包装在另一个对象中,它实现了<code>Runnable</code>接口</li></ul><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(</span><br><span class="line">          <span class="comment">// 每个学生都注册学号</span></span><br><span class="line">          () -&gt; reg.regId(s)</span><br><span class="line">        )</span><br><span class="line">         <span class="comment">// 学号注册完毕后，打印欢迎消息</span></span><br><span class="line">        .thenAccept(student -&gt; {</span><br><span class="line">          System.out.println(<span class="string">"你好 "</span> + student.getName());</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p><code>supplyAsync()</code>方法的作用:在一个单独的线程中执行<code>reg,regId(s)</code>语句,本质上就是多线程编程</p></blockquote><p>注册完后使用<code>thenAccept()</code>方法完成后继任务步骤,<code>thenAccept()</code>方法的参数(sutdent)就是<strong>前置任务返回的结果</strong>,自动执行student-&gt;{}后继任务,后继任务本质上也是多线程方式执行的,<code>thenAccept()</code>方法通常用于任务链末尾.</p><p><img src="https://img-blog.csdnimg.cn/bff4ac3f68704eb58214a2d1bc3301dd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALWlyb255LQ==,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,tepx;height: t_Q1NETiBALWlyb255LQpx;" alt="在这里插入图片描述"></p>        <h4 id="多步骤任务">          <a href="#多步骤任务" class="heading-link"><i class="fas fa-link"></i></a><a href="#多步骤任务" class="headerlink" title="多步骤任务"></a>多步骤任务</h4>      <p><code>supplyAsync()</code>用于开头,<code>thenAccept()</code>用于末尾,各自调用一次即可,中间有多个步骤,可以调用多次<code>thenApply()</code>,由于末尾也要用到之前的实例对象,所以中间的<code>thenApply</code>方法总是要return实例,否则下一个步骤就获取不到:</p><p><img src="https://img-blog.csdnimg.cn/1f3f2077d7b0471eb34b4432f9063043.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALWlyb255LQ==,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,tepx;height: t_Q1NETiBALWlyb255LQpx;" alt="在这里插入图片描述"></p><ul><li>多个任务之间是并行的,使用多线程同时执行多个任务</li><li>对于<strong>一个任务</strong>的多个步骤,是串行的,必须先执行完前一个步骤才能执行下一步骤</li></ul>        <h4 id="返回值">          <a href="#返回值" class="heading-link"><i class="fas fa-link"></i></a><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4>      <p><code>supplyAsync()</code>,<code>thenApply()</code>,<code>thenAccept()</code>返回的是<code>CompletableFuture</code>实例对象,可以设置返回值:</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Void&gt; cf = CompletableFuture.supplyAsync(() -&gt; reg.regId(s))</span><br><span class="line">  .thenApply(student -&gt; {</span><br><span class="line">    <span class="keyword">return</span> dis.assignClasses(student);</span><br><span class="line">  })</span><br><span class="line">  .thenAccept(student -&gt; {</span><br><span class="line">     System.out.println(<span class="string">"姓名："</span> + student.getName() + <span class="string">"，学号："</span> + student.getId() + <span class="string">"，班级号："</span> + student.getClassId());</span><br><span class="line">  });</span><br></pre></td></tr></tbody></table></div></figure><p>定义变量的类型就是<code>CompletableFuture</code>,可以使用泛型<code>CompletableFuture&lt;&gt;</code>表示其中包含的数据类型具体是什么类型.</p><p>如果没有调用<code>thenAccept()</code>方法结尾：</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(() -&gt; reg.regId(s))</span><br><span class="line">  .thenApply(student -&gt; {</span><br><span class="line">    <span class="keyword">return</span> dis.assignClasses(student);</span><br><span class="line">  });</span><br></pre></td></tr></tbody></table></div></figure><p>因为<code>thenApply()</code>lambda表达式返回的是Student对象,所以<code>CompletableFuture</code>实例对象包含的是<code>Student</code>数据,所以泛型返回的是<code>CompletableFuture&lt;Student&gt;</code></p><blockquote><p>这几个方法返回的CompletableFuture实例包含什么数据类型取决于Lambda表达式返回值的类型</p></blockquote>        <h4 id="main-方法的问题">          <a href="#main-方法的问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#main-方法的问题" class="headerlink" title="main()方法的问题"></a>main()方法的问题</h4>      <figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">List&lt;CompletableFuture&gt; cfs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">studentList.forEach(s -&gt; {</span><br><span class="line">  CompletableFuture&lt;Void&gt; cf = CompletableFuture.supplyAsync(() -&gt; reg.regId(s))</span><br><span class="line">    .thenApply(student -&gt; {</span><br><span class="line">        <span class="keyword">return</span> dis.assignClasses(student);</span><br><span class="line">    }).thenAccept(student -&gt; {</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + student.getName() + <span class="string">"，学号："</span> + student.getId() + <span class="string">"，班级号："</span> + student.getClassId());</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">  cfs.add(cf);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">  <span class="comment">// 等待所有的线程执行完毕</span></span><br><span class="line">  CompletableFuture.allOf(cfs.toArray(<span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[] {})).get();</span><br><span class="line">} <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p><code>CompletableFuture.allOf()</code>是静态方法作用是收集所有的任务实例对象,allOf()方法<strong>只支持数组</strong>不支持集合,所以要转换cfs.toArray(new CompletableFuture[] {}),再调用类方法get(),作用就是等待所有的任务线程(allOf()收集)再执行。</p><blockquote><p>在SpringBoot等服务器运行<code>supplyAsync()</code>异步任务编排的时候,就**没有必要使用get()**方法等待所有线程任务执行完毕,服务器往往是常驻程序,不是main()方法执行完就退出程序</p></blockquote><p>get()方法造成main()方法等待,所以是同步的,通过<code>CompletableFuture</code>编排的任务,不会造成main()方法等待这就是异步。</p>        <h4 id="安全布尔值的包装类">          <a href="#安全布尔值的包装类" class="heading-link"><i class="fas fa-link"></i></a><a href="#安全布尔值的包装类" class="headerlink" title="安全布尔值的包装类"></a>安全布尔值的包装类</h4>      <blockquote><p>java.util.concurrent.atomic.AtomicBoolean 能够以原子的方式操作布尔值</p></blockquote><ul><li>new AtomicBooolean(true) 就是true</li><li>new AtomicBooolean(false) 就是false</li></ul><p>取得布尔值使用<code>get()</code>方法</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AtomicBoolean</span> <span class="variable">ab</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicBoolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">value</span> <span class="operator">=</span> ab.get();</span><br></pre></td></tr></tbody></table></div></figure><p>实例对象调用<code>compareAndSet()</code>方法就能以原子的方式修改值,<code>compareAndSet(true,false)</code>判断当前值为true时,修改为false,然后返回成功或失败,<strong>这是三个步骤</strong></p><ul><li>修改成功返回true</li><li>修改失败返回false</li></ul><blockquote><p>compareAndSet()方法返回值<strong>与参数数值无关</strong></p></blockquote>        <h3 id="线程池">          <a href="#线程池" class="heading-link"><i class="fas fa-link"></i></a><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3>      <blockquote><p>为了优化做到复用Thread对象,不必每次都创建新对象,可以使用java的线程池</p></blockquote><p>线程池顾名思义像一个池子,里面装满了线程,线程可以被复用,一个线程可以执行A任务也可以执行B任务,线程不必频繁的创建和销毁,线程池也是**有限大的,**其中的线程数也是有限的,能同时运行的任务数也是有限的.</p><p><strong>创建线程池的核心代码(基本上属于固定写法)：</strong></p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.concurrent.BasicThreadFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentIDTest</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程工厂</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ThreadFactory</span> <span class="variable">namedThreadFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicThreadFactory</span>.Builder()</span><br><span class="line">            .namingPattern(<span class="string">"studentReg-pool-%d"</span>)</span><br><span class="line">            .daemon(<span class="literal">true</span>)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; workQueue = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程池服务</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">EXECUTOR_SERVICE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">            <span class="number">20</span>,</span><br><span class="line">            <span class="number">200</span>,</span><br><span class="line">            <span class="number">30</span>,</span><br><span class="line">            TimeUnit.SECONDS,</span><br><span class="line">            workQueue,</span><br><span class="line">            namedThreadFactory,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy()</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 构建学生集合</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">2000</span>; i++) {</span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">            s.setName(<span class="string">"学生"</span> + i);</span><br><span class="line">            <span class="type">Register</span> <span class="variable">register</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Register</span>(s);</span><br><span class="line"><span class="comment">// 传入 Runnable 对象，运行任务</span></span><br><span class="line">            EXECUTOR_SERVICE.execute(register);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></div></figure><p>这里的<code>BasicThreadFactory</code>需要依赖库:</p><figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure>        <h4 id="创建线程工厂">          <a href="#创建线程工厂" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建线程工厂" class="headerlink" title="创建线程工厂"></a>创建线程工厂</h4>      <figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">BasicThreadFactory</span>.Builder()</span><br><span class="line">  .namingPattern(<span class="string">"studentReg-pool-%d"</span>)</span><br><span class="line">  .daemon(<span class="literal">true</span>)</span><br><span class="line">  .build();</span><br></pre></td></tr></tbody></table></div></figure><p><code>namingPattern()</code>方法是定义线程名字的格式,相当于线程名称模板这里的<code>studentReg</code>就是任务名称。</p>        <h4 id="创建线程等待队列实例">          <a href="#创建线程等待队列实例" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建线程等待队列实例" class="headerlink" title="创建线程等待队列实例"></a>创建线程等待队列实例</h4>      <p>性能较好CPU核数多内存大队列可以大一些:<code>new LinkedBlockingQueue&lt;Runnable&gt;(2048)</code>参数表示能排队的任务个数</p>        <h4 id="创建线程池实例">          <a href="#创建线程池实例" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建线程池实例" class="headerlink" title="创建线程池实例"></a>创建线程池实例</h4>      <blockquote><p> ThreadPoolExecutor构造函数参数如下</p></blockquote><p><img src="https://img-blog.csdnimg.cn/fececc1d74224491926674d66e8291bc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALWlyb255LQ==,size_18,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,tepx;height: t_Q1NETiBALWlyb255LQpx;" alt="在这里插入图片描述"></p><blockquote><p>多线程编程要防止线程数过多把系统崩溃,可以采取分批处理的思想</p></blockquote><p>执行线程池对象的<code>execute()</code>方法把实现Runnable接口的实例对象传入即可</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入 Runnable 对象，运行任务</span></span><br><span class="line">  EXECUTOR_SERVICE.execute(register);</span><br></pre></td></tr></tbody></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat的安装</title>
      <link href="/2022/02/17/Tomcat%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>/2022/02/17/Tomcat%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>最近没事玩了一下自己的阿里云服务器,然后想着Tomcat好像都没安装就去网上搜了一些资料，顺便整理一下自己以前Windows安装Tomcat的经验,写个博客记录一下.</p>        <h2 id="Tomcat是个啥">          <a href="#Tomcat是个啥" class="heading-link"><i class="fas fa-link"></i></a><a href="#Tomcat是个啥" class="headerlink" title="Tomcat是个啥"></a>Tomcat是个啥</h2>      <p><span class="exturl"><a class="exturl__link" href="https://lmbtfy.cn/s/yPEYDUVDjC">自行百度</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>(doge)</p>        <h2 id="Windows的Tomcat安装">          <a href="#Windows的Tomcat安装" class="heading-link"><i class="fas fa-link"></i></a><a href="#Windows的Tomcat安装" class="headerlink" title="Windows的Tomcat安装"></a>Windows的Tomcat安装</h2>      <p>首先到<span class="exturl"><a class="exturl__link" href="https://tomcat.apache.org/">官网</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>下载<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/101b2ccbd5c847e2bbcc83049d24c91c~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>我这里选的是8.5的版本,下载后解压到你要的位置就可以了(<strong>最好记住位置</strong>)<br>打开后会显示以下文件夹目录:<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f83038ea6324ee79c232c1c79b425c4~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>在bin文件夹下的startup.bat与showdown.bat是启动和关闭<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/468b54f66d4444858d0988d017f02e98~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>但如果你直接点击启动可能会闪退所以你需要配置路径<br>打开环境变量,你需要先把jdk的路径配置好(<span class="exturl"><a class="exturl__link" href="https://blog.csdn.net/renlianggee/article/details/90023464?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163612307816780269859484%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163612307816780269859484&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-90023464.first_rank_v2_pc_rank_v29&amp;utm_term=jdk%E9%85%8D%E7%BD%AE&amp;spm=1018.2226.3001.4187">教程</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>)<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a68afadea1a14f1a80e04e2d1fd07d1f~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>配置好JDK路径后需要配置Tomcat的路径:<br>首先在系统变量中创建变量名为<code>CATALINA_HOME</code>值是你的Tomcat存放的路径:<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6acc999bb4d042208da03500610582a1~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>保存好后就可以打开他了<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a63be7457c564ad1bebf43dfbf7077c6~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>打开浏览器输入<code>http://localhost:8080</code>出现下面画面就证明成功了</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/acfa4e8305af45b59a627684c77676b5~tplv-k3u1fbpfcp-zoom-1.image"><br>接着进行Tomcat的配置:<br>打开conf文件夹下的server.xml(这里我用notepad++打开)<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b502697b56d449078dffd59556ce0f35~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>然后Ctrl+F输入8080找到它,这里的port就是端口号可以修改它<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30133ced36274c85bfbcfe53322b666d~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>当然你会发现你点击startup.bat窗口里有一堆乱码这个时候你可以修改logging.properties<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ce364f3ce7db408e92f7322f691f5429~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>打开它将原先的utf-8改成gbk修改:<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e1f0f905472407bbd580410bdfe0d78~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>这样就不是乱码了.</p><blockquote><p>到这windows的tomcat就下好了如果有啥问题可以自行百度因为我是个菜鸡(狗头)</p></blockquote>        <h2 id="Linux的Tomcat下载">          <a href="#Linux的Tomcat下载" class="heading-link"><i class="fas fa-link"></i></a><a href="#Linux的Tomcat下载" class="headerlink" title="Linux的Tomcat下载"></a>Linux的Tomcat下载</h2>      <blockquote><p>这里我使用的服务器是阿里云,其他服务器安装应该步骤也大致相同</p></blockquote><p>首先下载<span class="exturl"><a class="exturl__link" href="https://tomcat.apache.org/download-90.cgi">Tomcat的Linux版本</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9fa9eeb5c85f4977b5fb03c41519c194~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>这里我下的是9的版本(我也不知道为啥要下两个版本不一样的Tomcat)</p><p>下好后打开你的服务器宝塔面板(不知道宝塔的朋友可以看看<span class="exturl"><a class="exturl__link" href="https://blog.csdn.net/weixin_44535476/article/details/98218087?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163612627816780265444585%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163612627816780265444585&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-98218087.first_rank_v2_pc_rank_v29&amp;utm_term=%E5%AE%9D%E5%A1%94&amp;spm=1018.2226.3001.4187">这个文章</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>)</p><p>弄好宝塔后打开宝塔面板找到文件<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/57753801f0a549b081cffe282f1557c4~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>选择你要放的文件夹,这里我在usr文件夹下建立了tomcat文件夹并放在它的下面<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81a32dad916a4beabba2a9501a0492b7~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>然后点击上传将下好的Tomcat文件拖放进去就好了<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8b146e813f8434082d785d9b0838d73~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p><p> 接着打开XShell连接到你的云服务器(<span class="exturl"><a class="exturl__link" href="https://blog.csdn.net/wangyuxi__/article/details/89742797?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163612740516780274198761%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163612740516780274198761&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-89742797.first_rank_v2_pc_rank_v29&amp;utm_term=%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8Xshell&amp;spm=1018.2226.3001.4187">如何连接</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>)<br>进入你的文件夹下输入<code> tar -zxvf apache-tomcat-9.0.54.tar.gz</code>解压你的Tomcat,(<strong>注意版本号是否和你下的一致</strong>)<br>比如我的就是</p><figure class="highlight powershell"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/tomcat</span><br><span class="line">tar <span class="literal">-zxvf</span> apache<span class="literal">-tomcat-9</span>.<span class="number">0.54</span>.tar.gz</span><br></pre></td></tr></tbody></table></div></figure><p>这样就把Tomcat解压完成了</p><p>然后就是启动和运行:</p><figure class="highlight powershell"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//转到bin目录</span><br><span class="line"><span class="built_in">cd</span> apache<span class="literal">-tomcat-9</span>.<span class="number">0.54</span>/bin/</span><br><span class="line"> </span><br><span class="line">//开启Tomcat</span><br><span class="line">./startup.sh</span><br><span class="line"> </span><br><span class="line">//关闭Tomcat（可关可不关）</span><br><span class="line">./shutdown.sh</span><br></pre></td></tr></tbody></table></div></figure><p>最后要提醒的是你必须将你的服务器8080端口打开否则不能访问</p><p>直接到你的阿里云服务器找到安全组<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/619a77c5b36246a9a887716a4832d8f1~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>点击添加安全组规则<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da016254ca40421b88e5feaa7563361a~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>这样设置就好了<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8777c317674c4fcc9592aabe6254b13c~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>再到你的<strong>宝塔的安全</strong>上放行8080端口即可<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e427e12af63e4e99b9a9323aca1e76db~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"><br>这样你就可以启动你的Tomcat了<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e28a4ffd76d4edfbb4e12ab9b4600f2~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p>        <h2 id="参考博客">          <a href="#参考博客" class="heading-link"><i class="fas fa-link"></i></a><a href="#参考博客" class="headerlink" title="参考博客:"></a>参考博客:</h2>      <p><span class="exturl"><a class="exturl__link" href="https://blog.csdn.net/m0_37975886/article/details/78797070?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85tomcat&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-78797070.first_rank_v2_pc_rank_v29&amp;spm=1018.2226.3001.4187">点击这里跳转</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><blockquote><p>以上是我个人对Tomcat安装的学习有错误还望指正,希望能对你们有帮助🤣</p></blockquote><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/518c6532c00649aa95bf0625c9df004c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue的学习总结</title>
      <link href="/2022/02/17/vue/"/>
      <url>/2022/02/17/vue/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue的介绍">          <a href="#Vue的介绍" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vue的介绍" class="headerlink" title="Vue的介绍"></a>Vue的介绍</h2>      <blockquote><p>Vue是用于构建用户界面的渐进式框架,主要特点是易用,灵活,性能优良</p></blockquote><p>有兴趣可以查看一下官方介绍的视频<span class="exturl"><a class="exturl__link" href="https://qgt-document.oss-cn-beijing.aliyuncs.com/P3-5-Vue/1/video/vue%20%E5%AE%98%E6%96%B9%E4%BB%8B%E7%BB%8D.mp4">点击这里</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h2 id="Vue的配置">          <a href="#Vue的配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vue的配置" class="headerlink" title="Vue的配置"></a>Vue的配置</h2>              <h3 id="安装node-js">          <a href="#安装node-js" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3>      <p>我们需要的是node.js里的<strong>npm</strong>,安装很简单首先去官网下载安装包<span class="exturl"><a class="exturl__link" href="https://nodejs.org/en/">node.js官网</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>选择下载最新版本即可,一直下一步进行安装<br><img src="https://img-blog.csdnimg.cn/9090ce2732594c24ad0398c3e888ba49.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTUzMjIzMg==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTUzMjIzMgpx;" alt="在这里插入图片描述"><br>安装完成后直接<strong>win+R</strong>打开cmd,输入<code>node -v</code>查看版本号<br><img src="https://img-blog.csdnimg.cn/57d6ddbb41b44d2687e5585a1b08bb78.png" alt="在这里插入图片描述"><br>顺带检查一下npm(包管理工具),输入<code>npm -v</code></p>        <h3 id="安装Vue-CLI-脚手架">          <a href="#安装Vue-CLI-脚手架" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装Vue-CLI-脚手架" class="headerlink" title="安装Vue CLI(脚手架)"></a>安装Vue CLI(脚手架)</h3>      <blockquote><p>Vue CLI就是Vue工程的升级版,更牛逼一点</p><p>执行以下命令(因为npm下载的插件都是国外的服务器中下载,以下代码就是将镜像切换成淘宝镜像)</p></blockquote><figure class="highlight powershell"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install <span class="literal">-g</span> cnpm <span class="literal">--registry</span>=https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight powershell"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 注意这里要用的是cnpm</span><br><span class="line">cnpm install <span class="literal">-g</span> @vue/<span class="built_in">cli</span></span><br></pre></td></tr></tbody></table></div></figure><p>输入<code>vue --version</code>验证是否安装成功</p>        <h2 id="创建Vue工程">          <a href="#创建Vue工程" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建Vue工程" class="headerlink" title="创建Vue工程"></a>创建Vue工程</h2>      <ol><li>执行以下命令创建Vue工程</li></ol><figure class="highlight powershell"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// vue 创建 工程名</span><br><span class="line">vue create vue<span class="literal">-01</span></span><br></pre></td></tr></tbody></table></div></figure><ol start="2"><li>此时会出现几个选项,选择最后一个—自定义配置(键盘上下键选择,回车确认)</li></ol><p><img src="https://img-blog.csdnimg.cn/42458d37410c452486e845760707fd67.png" alt="在这里插入图片描述"></p><ol start="3"><li>选中后进入自定义配置选项,勾选Babel,Router即可(空格选中/反选,回车确认)</li><li>下一步是询问你是否使用历史模式的路由器,根据自己的需要来选择Y OR N,然后回车<br><img src="https://img-blog.csdnimg.cn/c4ea7ab242e648a380a78fdbc0f43c91.png" alt="在这里插入图片描述"></li><li>然后询问你Babel等配置文件放哪,我们选择放在package.json里<br><img src="https://img-blog.csdnimg.cn/491302a259df4ea693a08d87727a5ecf.png" alt="在这里插入图片描述"></li><li>最后一步是问你是否保存这次配置</li></ol><p>完成以上操作后我们成功创建了一个原始的Vue项目,脚手架还送了两个命令<br><img src="https://img-blog.csdnimg.cn/04f9cec45f19426e9682e724d92fff98.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTUzMjIzMg==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTUzMjIzMgpx;" alt="在这里插入图片描述"><br>执行这两个命令<br><img src="https://img-blog.csdnimg.cn/52e5229c18f04dafb52812f88777be71.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTUzMjIzMg==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTUzMjIzMgpx;" alt="在这里插入图片描述"><br>如图给了我们两个地址,第二个为你电脑的<strong>IP地址</strong>,打开两个中任意一个即可<br><img src="https://img-blog.csdnimg.cn/9f0c94744fb64d24b84387c3a2d1745c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTUzMjIzMg==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTUzMjIzMgpx;" alt="在这里插入图片描述"></p><blockquote><p>打开后看到这个就代表你成功了</p></blockquote>        <h2 id="Vue工程目录">          <a href="#Vue工程目录" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vue工程目录" class="headerlink" title="Vue工程目录"></a>Vue工程目录</h2>      <ol><li>assets:存放项目中需要用到的<strong>资源文件</strong>,css,js,images等</li><li>componets:存放vue开发中的公共组件</li><li>router:vue路由的配置文件</li><li>views:存放页面文件</li><li>app.vue:根组件</li><li>main.js:项目的入口文件,定义了vue实例,并引入根组件app.vue</li></ol>        <h2 id="Vue代码结构">          <a href="#Vue代码结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vue代码结构" class="headerlink" title="Vue代码结构"></a>Vue代码结构</h2>      <blockquote><p>我们可以将代码写在app.vue中,以下是app.vue中的代码</p></blockquote><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// template即模版的意思，每一个vue文件里必须要有一个，在这里写HTML代码</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 在这里写js逻辑相关的代码</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">"app"</span></span></span><br><span class="line"><span class="language-javascript">  };</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 这里写样式代码</span><br><span class="line"><span class="comment">&lt;!-- scope的意思表示这段样式只在本xxx.vue文件中生效，其他xxx.vue文件中不会生效，有锁定的意思 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scope</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>每一个Vue文件由三部分组成template、script、style，分别对应HTML,JavaScript,CSS</p></blockquote><p><em>template里面只允许有一个块状元素,其他所有的标签都在这个块标签内</em></p>        <h2 id="Vue的声明渲染">          <a href="#Vue的声明渲染" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vue的声明渲染" class="headerlink" title="Vue的声明渲染"></a>Vue的声明渲染</h2>      <p>使用<strong>差值表达式</strong>来将数据渲染在页面中就是一个两层的大括号<code>{{}}</code></p>        <h3 id="字符串渲染">          <a href="#字符串渲染" class="heading-link"><i class="fas fa-link"></i></a><a href="#字符串渲染" class="headerlink" title="字符串渲染"></a>字符串渲染</h3>      <p>JS中我们会这样做</p><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"Vue"</span>;</span><br><span class="line"><span class="keyword">let</span> template = <span class="string">`&lt;h2&gt;<span class="subst">${str}</span>&lt;/h2&gt;`</span>;</span><br><span class="line"><span class="comment">// 后面省略一系列DOM操作</span></span><br></pre></td></tr></tbody></table></div></figure><p>在Vue中首先在<strong>template</strong>部分确定插值表达式的位置上,并填充变量名:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>{{title}}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p>然后再在<strong>script</strong>部分定义字符串变量:</p><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// export default是固定格式，不需要纠结</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="comment">// 模块的名字</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">    <span class="comment">// 页面中数据存放的地方</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">      <span class="keyword">return</span> {</span><br><span class="line">        <span class="attr">title</span>: <span class="string">"Vue"</span></span><br><span class="line">      };</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="数组的渲染">          <a href="#数组的渲染" class="heading-link"><i class="fas fa-link"></i></a><a href="#数组的渲染" class="headerlink" title="数组的渲染"></a>数组的渲染</h3>      <p>填充数据时可以采用数组下标的形式去取数据:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>{{title}}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>{{todoList[0]}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>{{todoList[1]}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>{{todoList[2]}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>{{todoList[3]}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>{{todoList[4]}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p>然后在script里定义数组</p><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">title</span>: <span class="string">"今日待完成事项"</span>,</span><br><span class="line">      <span class="attr">todoList</span>: [</span><br><span class="line">        <span class="string">"完成HTML标签学习"</span>,</span><br><span class="line">        <span class="string">"完成CSS文字样式学习"</span>,</span><br><span class="line">        <span class="string">"完成CSS盒模型学习"</span>,</span><br><span class="line">        <span class="string">"完成Flex布局学习"</span>,</span><br><span class="line">        <span class="string">"完成JavaScript入门学习"</span></span><br><span class="line">      ]</span><br><span class="line">    };</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><ul><li>data方法里面用来存放数据或者全局变量</li><li>scope可以理解为锁将css所在本文件中,只在本文件中有效</li></ul>        <h3 id="对象数组">          <a href="#对象数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h3>      <p> 渲染一个班级名单列表:</p><div class="table-container"><table><thead><tr><th>姓名</th><th>班级</th><th>总成绩</th></tr></thead><tbody><tr><td>张三</td><td>三年级二班</td><td>290</td></tr><tr><td>李四</td><td>三年级二班</td><td>270</td></tr><tr><td>王五</td><td>三年级二班</td><td>270</td></tr></tbody></table></div><p><strong>需要定义一个这样的变量:</strong></p><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>){</span><br><span class="line">      <span class="keyword">return</span> {</span><br><span class="line">          <span class="attr">list</span>:[</span><br><span class="line">              {</span><br><span class="line">                  <span class="attr">name</span>:<span class="string">"张三"</span>,</span><br><span class="line">                  <span class="attr">grade</span>:<span class="string">"三年级二班"</span>,</span><br><span class="line">                  <span class="attr">mark</span>:<span class="number">290</span></span><br><span class="line">              },</span><br><span class="line">              {</span><br><span class="line">                  <span class="attr">name</span>:<span class="string">"李四"</span>,</span><br><span class="line">                  <span class="attr">grade</span>:<span class="string">"三年级二班"</span>,</span><br><span class="line">                  <span class="attr">mark</span>:<span class="number">270</span></span><br><span class="line">              },</span><br><span class="line">              {</span><br><span class="line">                  <span class="attr">name</span>:<span class="string">"王五"</span>,</span><br><span class="line">                  <span class="attr">grade</span>:<span class="string">"三年级二班"</span>,</span><br><span class="line">                  <span class="attr">mark</span>:<span class="number">270</span></span><br><span class="line">              }</span><br><span class="line">          ]</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure>        <h2 id="处理用户输入">          <a href="#处理用户输入" class="heading-link"><i class="fas fa-link"></i></a><a href="#处理用户输入" class="headerlink" title="处理用户输入"></a>处理用户输入</h2>              <h3 id="v-model-双向绑定-–input">          <a href="#v-model-双向绑定-–input" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-model-双向绑定-–input" class="headerlink" title="v-model(双向绑定) –input"></a>v-model(双向绑定) –input</h3>      <blockquote><p>双向绑定就是我们在input框当中输入内容时,显示内容的地方也会随之改变</p></blockquote><p>定义一个HTML代码</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里的v-model="message"将input的值绑定--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span>{{message}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"请输入你想输入的内容"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p>定义要用到的变量</p><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">message</span>: <span class="string">""</span></span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><p>也就是改变<strong>input框中的值</strong>,<strong>message</strong>的值也将改变</p>        <h3 id="v-model-–checkbox">          <a href="#v-model-–checkbox" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-model-–checkbox" class="headerlink" title="v-model –checkbox"></a>v-model –checkbox</h3>      <p>复选框上使用双向绑定,案例如下:<br><img src="C:/Users/HP/AppData/Roaming/Typora/typora-user-images/image-20220212114741224.png" alt="image-20220212114741224"></p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"prepare"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>{{checkBox}}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>{{plan}}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"textarea"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"run"</span> <span class="attr">value</span>=<span class="string">"跑步"</span> <span class="attr">v-model</span>=<span class="string">"checkBox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"run"</span>&gt;</span>跑步<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"yujia"</span> <span class="attr">value</span>=<span class="string">"瑜伽"</span> <span class="attr">v-model</span>=<span class="string">"checkBox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"yujia"</span>&gt;</span>瑜伽<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"yangwo"</span> <span class="attr">value</span>=<span class="string">"仰卧起坐"</span> <span class="attr">v-model</span>=<span class="string">"checkBox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"yangwo"</span>&gt;</span>仰卧起坐<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">placeholder</span>=<span class="string">"请输入你的健身计划"</span> <span class="attr">v-model</span>=<span class="string">"plan"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">checkBox</span>: [],</span><br><span class="line">            <span class="attr">plan</span>:<span class="string">""</span></span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><p>因为复选框的内容可以看做一个数组,所以定义变量时可以将它定义成数组,每个选项都用<strong>v-model</strong>绑定</p>        <h2 id="处理用户事件">          <a href="#处理用户事件" class="heading-link"><i class="fas fa-link"></i></a><a href="#处理用户事件" class="headerlink" title="处理用户事件"></a>处理用户事件</h2>              <h3 id="方法">          <a href="#方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#方法" class="headerlink" title="方法"></a>方法</h3>      <p>Vue中进行两步操作,第一步:给元素添加事件,第二步给事件加方法</p><ol><li>在Vue中添加事件叫做事件绑定使用<code>@click="方法名"</code>如:<figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add()"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span>```</span><br></pre></td></tr></tbody></table></div></figure></li><li>methods(方法)<br>将方法抽离出来放在对应的位置</li></ol><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>{</span><br><span class="line">    <span class="attr">name</span>:<span class="string">"app"</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>){</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">          <span class="attr">counter</span>: <span class="number">0</span></span><br><span class="line">        };   <span class="comment">//这里要加分号</span></span><br><span class="line">    },   <span class="comment">//这里要加逗号</span></span><br><span class="line">    <span class="attr">methods</span>:{</span><br><span class="line">        <span class="comment">// 在这里存放方法</span></span><br><span class="line">        <span class="attr">add</span>:<span class="keyword">function</span>(<span class="params"></span>){</span><br><span class="line">           <span class="comment">//方法内容</span></span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">counter</span>++</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>使用data定义的变量时要在前面加this,<code>@click="add()"</code>,括号里可以传递参数</p></blockquote>        <h3 id="事件修饰符-与js中的作用一样">          <a href="#事件修饰符-与js中的作用一样" class="heading-link"><i class="fas fa-link"></i></a><a href="#事件修饰符-与js中的作用一样" class="headerlink" title="事件修饰符(与js中的作用一样)"></a>事件修饰符(与js中的作用一样)</h3>      <ol><li>阻止冒泡事件</li></ol><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.stop</span>=<span class="string">"fn2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><ol start="2"><li>捕获事件</li></ol><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span> @<span class="attr">click.capture</span>=<span class="string">"fn2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><ol start="3"><li>阻止默认事件</li></ol><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span> @<span class="attr">click.prevent</span>=<span class="string">"fn2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>监听数据变化,在Vue中是通过侦听器来实现的,时刻监听某个数据的变化</p></blockquote>        <h2 id="watch的基本用法">          <a href="#watch的基本用法" class="heading-link"><i class="fas fa-link"></i></a><a href="#watch的基本用法" class="headerlink" title="watch的基本用法"></a>watch的基本用法</h2>      <ol><li>侦听器的书写位置<br>写在<strong>export default</strong>中与<strong>data</strong>和<strong>methods</strong>用<code>,</code>隔开<figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">    <span class="comment">// 数据 key---data value---Function</span></span><br><span class="line">    <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">      <span class="keyword">return</span> {</span><br><span class="line">         <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">      };</span><br><span class="line">    },</span><br><span class="line">    <span class="comment">// 方法 key---methods value---{}</span></span><br><span class="line">    <span class="attr">methods</span>: {},</span><br><span class="line">    <span class="comment">//在export default中添加即可不用管顺序</span></span><br><span class="line">    <span class="attr">watch</span>: {</span><br><span class="line">       <span class="comment">//监听内容</span></span><br><span class="line">       <span class="title function_">count</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"count发生了变化"</span>);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure>监听器里的方法一定要与被监听的变量名一致        <h2 id="侦听器的进阶用法">          <a href="#侦听器的进阶用法" class="heading-link"><i class="fas fa-link"></i></a><a href="#侦听器的进阶用法" class="headerlink" title="侦听器的进阶用法"></a>侦听器的进阶用法</h2>              <h3 id="获取前一次的值">          <a href="#获取前一次的值" class="heading-link"><i class="fas fa-link"></i></a><a href="#获取前一次的值" class="headerlink" title="获取前一次的值"></a>获取前一次的值</h3>      </li></ol><blockquote><p>有的时候需要上一次的数据,再上一个案例中添加一个参数即可获取旧值</p></blockquote><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>:{</span><br><span class="line">    <span class="title function_">inputValue</span>(<span class="params">value,oldValue</span>) {</span><br><span class="line">        <span class="comment">// 第一个参数为新值，第二个参数为旧值，不能调换顺序</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`新值：<span class="subst">${value}</span>`</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`旧值：<span class="subst">${oldValue}</span>`</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="handler方法和immediate属性">          <a href="#handler方法和immediate属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#handler方法和immediate属性" class="headerlink" title="handler方法和immediate属性"></a>handler方法和immediate属性</h3>      <ul><li>immediate: 可以让页面第一次渲染的时候去触发侦听器</li><li>handler: 监听到修改之后这个函数会执行</li></ul><p>侦听器实际上是一个对象,里面包含了handler方法和其他属性:</p><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">    <span class="attr">watch</span>: {</span><br><span class="line">      <span class="attr">firstName</span>: {</span><br><span class="line">        <span class="attr">handler</span>: <span class="keyword">function</span> (<span class="params">newName, oldName</span>) {</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">fullName</span> = newName + <span class="string">" "</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">        },</span><br><span class="line">        <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure>        <h2 id="HTML属性渲染语法">          <a href="#HTML属性渲染语法" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTML属性渲染语法" class="headerlink" title="HTML属性渲染语法"></a>HTML属性渲染语法</h2>              <h3 id="动态绑定–v-bind">          <a href="#动态绑定–v-bind" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态绑定–v-bind" class="headerlink" title="动态绑定–v-bind"></a>动态绑定–v-bind</h3>      <blockquote><p>在HTML中每个标签都有自己的属性,要让他们随data中定义的值变化而变化,就要用到属性绑定</p></blockquote><p>例如img标签的alt属性:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"#"</span> <span class="attr">v-bind:alt</span>=<span class="string">"imgText"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">imgText</span>:<span class="string">'周杰伦演唱会图片'</span></span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><p><strong>动态渲染图片</strong></p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"album"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imgList[0]"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imgList[1]"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imgList[2]"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imgList[3]"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">      <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">      <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">          <span class="keyword">return</span> {</span><br><span class="line">              <span class="attr">imgList</span>:[</span><br><span class="line">                  <span class="string">'http://pic2.zhimg.com/50/v2-4a06728efc99ba874a5d7422fd55aaed_hd.jpg'</span>,</span><br><span class="line">                  <span class="string">'http://img2.imgtn.bdimg.com/it/u=372764256,3394765004&amp;fm=26&amp;gp=0.jpg'</span>,</span><br><span class="line">                  <span class="string">'http://img1.imgtn.bdimg.com/it/u=1898582417,1582081952&amp;fm=26&amp;gp=0.jpg'</span>,</span><br><span class="line">                  <span class="string">'http://b-ssl.duitang.com/uploads/item/201707/10/20170710141316_vVFNh.thumb.700_0.jpeg'</span></span><br><span class="line">              ]</span><br><span class="line">          };</span><br><span class="line">      };</span><br><span class="line">  }</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>这里用 <code>:src</code>是<code>v-bind:src</code>的简写,这里可以使用循环来减少代码量</p></blockquote>        <h3 id="模板中使用表达式">          <a href="#模板中使用表达式" class="heading-link"><i class="fas fa-link"></i></a><a href="#模板中使用表达式" class="headerlink" title="模板中使用表达式"></a>模板中使用表达式</h3>      <p>在差值表达式中不仅可以写一个变量,还可以进行简单的计算</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>{{index + 1 }}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">index</span>: <span class="number">0</span></span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><p>还可以在模板中使用<strong>三元表达式</strong></p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ flag?'你已经及格':'你还没有及格' }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"exchange"</span>&gt;</span>转换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">flag</span>:<span class="literal">true</span></span><br><span class="line">        };</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">methods</span>:{</span><br><span class="line">        <span class="title function_">exchange</span>(<span class="params"></span>){</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">flag</span> = !<span class="variable language_">this</span>.<span class="property">flag</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>点击按钮切换flag的值,对应的p标签的内容会随之改变</p></blockquote>        <h2 id="条件渲染语句">          <a href="#条件渲染语句" class="heading-link"><i class="fas fa-link"></i></a><a href="#条件渲染语句" class="headerlink" title="条件渲染语句"></a>条件渲染语句</h2>      <blockquote><p>可以把它看成if语句,条件满足时会显示标签里的内容</p></blockquote><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"isPassed"</span>&gt;</span>{{score}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">        <span class="comment">//当条件满足的时候，显示这里的内容</span></span><br><span class="line">            <span class="attr">score</span>: <span class="number">78</span></span><br><span class="line">        };</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">methods</span>:{</span><br><span class="line">        <span class="title function_">isPassed</span>(<span class="params"></span>){</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">score</span>&lt;<span class="number">60</span>) </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><p><strong>v-else-if和v-else的用法和if,else一样</strong></p>        <h2 id="列表渲染语句">          <a href="#列表渲染语句" class="heading-link"><i class="fas fa-link"></i></a><a href="#列表渲染语句" class="headerlink" title="列表渲染语句"></a>列表渲染语句</h2>              <h3 id="循环渲染数字">          <a href="#循环渲染数字" class="heading-link"><i class="fas fa-link"></i></a><a href="#循环渲染数字" class="headerlink" title="循环渲染数字"></a>循环渲染数字</h3>      <figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in 5"</span> <span class="attr">:key</span>=<span class="string">"item"</span>&gt;</span>{{ item }}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p>从1开始循环遍历数字直到5结束,最终得到5个li标签</p><blockquote><p>:key的作用: 为了确保每一个item是唯一的,所以需要唯一的key</p></blockquote>        <h3 id="循环渲染数组">          <a href="#循环渲染数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#循环渲染数组" class="headerlink" title="循环渲染数组"></a>循环渲染数组</h3>      <figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in nameList"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span>{{ item }}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">nameList</span>:[<span class="string">"张三"</span>,<span class="string">"李四"</span>,<span class="string">"王五"</span>]</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><p>这样可以得到一个姓名列表,(item,index)代表元素和对应的下标,<strong>in nameList</strong>意思是在这个叫nameList的数组里循环</p>        <h3 id="循环渲染对象">          <a href="#循环渲染对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#循环渲染对象" class="headerlink" title="循环渲染对象"></a>循环渲染对象</h3>      <figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    value：对象中每一项的值</span></span><br><span class="line"><span class="comment">    key：对象中每一项的键</span></span><br><span class="line"><span class="comment">    index：索引</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value,key,index) in book"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span>值：{{ value }}--键：{{ key }}--索引：{{ index }}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">book</span>:{</span><br><span class="line">                <span class="attr">bookName</span>:<span class="string">'指环王'</span>,</span><br><span class="line">                <span class="attr">author</span>:<span class="string">'JK 罗琳'</span></span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><p>结果如下:<br><img src="https://img-blog.csdnimg.cn/3eca5481a083439ebd6658f2dd122dd7.png" alt="在这里插入图片描述"></p>        <h3 id="遍历数组中的对象">          <a href="#遍历数组中的对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#遍历数组中的对象" class="headerlink" title="遍历数组中的对象"></a>遍历数组中的对象</h3>      <p>大多情况都是遍历数组中的对象</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in books"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">        {{ index+1 }}----{{ item.title }}----{{ item.author }}----{{ item.publishedTime }}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">books</span>: [</span><br><span class="line">                {</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">'《魔戒》'</span>,</span><br><span class="line">                    <span class="attr">author</span>: <span class="string">'约翰·罗纳德·瑞尔·托尔金'</span>,</span><br><span class="line">                    <span class="attr">publishedTime</span>: <span class="string">'1954'</span></span><br><span class="line">                },{</span><br><span class="line">                    <span class="attr">title</span>:<span class="string">'《哈利·波特》'</span>,</span><br><span class="line">                    <span class="attr">author</span>:<span class="string">'J·K·罗琳'</span>,</span><br><span class="line">                    <span class="attr">publishedTime</span>:<span class="string">'1997'</span></span><br><span class="line">                },{</span><br><span class="line">                    <span class="attr">title</span>:<span class="string">'《人性的弱点》'</span>,</span><br><span class="line">                    <span class="attr">author</span>:<span class="string">'戴尔•卡内基'</span>,</span><br><span class="line">                    <span class="attr">publishedTime</span>:<span class="string">'2008'</span></span><br><span class="line">                }</span><br><span class="line">            ]</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><p>结果:<br><img src="https://img-blog.csdnimg.cn/31c3140eb17c45a493e6ef86353d5de3.png" alt="在这里插入图片描述"></p>        <h2 id="计算属性">          <a href="#计算属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2>      <blockquote><p>计算属性是继data,methods,watch之后的新成员</p></blockquote><p>书写位置:</p><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'app'</span>,</span><br><span class="line">    <span class="comment">// 计算属性</span></span><br><span class="line">    <span class="attr">computed</span>: {},</span><br><span class="line">  };</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><p>计算属性的写法:</p><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">      <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">      <span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>){</span><br><span class="line">          <span class="keyword">return</span> {</span><br><span class="line">              <span class="attr">message</span>:<span class="string">"hello world!"</span></span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line">      <span class="comment">// 计算属性</span></span><br><span class="line">      <span class="attr">computed</span>:{</span><br><span class="line">      <span class="comment">//让字符串反转</span></span><br><span class="line">          <span class="attr">reverseMessage</span>:<span class="keyword">function</span>(<span class="params"></span>){</span><br><span class="line">              <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">split</span>(<span class="string">''</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">''</span>)</span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line">  };</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><p>计算属性和方法的区别:<br>上述的案例也可以用methods来实现但二者区别在于:</p><ul><li>计算属性<br>当message改变时,reverseMessage计算属性会重新计算,然后返回计算结果,message不改变时,reverseMessage计算属性会返回缓存的值而不会重新计算</li><li>方法<br>每次访问时,都会去执行方法体里的逻辑然后返回结果</li></ul><blockquote><p>总结: 计算属性避免了不必要的代码执行,性能更优</p></blockquote>        <h2 id="动态class">          <a href="#动态class" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态class" class="headerlink" title="动态class"></a>动态class</h2>              <h3 id="动态绑定">          <a href="#动态绑定" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h3>      <p>动态绑定的语法:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base"</span> <span class="attr">v-bind:class</span>=<span class="string">"{ active: isActive }"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight css"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.active</span> {</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p>isActive是boolean类型的值,决定是否应用该类名</p><ol><li><p>类名的书写<br>如果是单个类名的书写就和上面一样,如果是带字符的类名则要加引号将类名括起来</p></li><li><p>引号规则<br>看类名的引号决定外面大括号的引号:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 外双内单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"{ 'base-active': isActive }"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 外单内双 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">'{ "base-active": isActive }'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure></li></ol>        <h3 id="动态样式绑定的条件类型">          <a href="#动态样式绑定的条件类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态样式绑定的条件类型" class="headerlink" title="动态样式绑定的条件类型"></a>动态样式绑定的条件类型</h3>      <ol><li>变量形式<br>通过使用变量的形式来获取布尔值:</li></ol><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"{ active: isActive }"</span>&gt;</span>颜色<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p>在data中定义布尔类型的变量</p><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>){</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        <span class="attr">isActive</span>:<span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p>通过改变布尔值来改变动态绑定的样式</p><ol start="2"><li>方法形式<br>可以通过方法来决定渲染,看方法返回的结果得到布尔值</li><li>表达式形式</li></ol><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">"{ 'new-appear': this.type === 'NEW' }"</span>&gt;</span>新<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><ol start="4"><li>计算属性形式<br>可以将样式对象和判断条件都放在计算属性内:</li></ol><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: {</span><br><span class="line">  <span class="attr">hoverObj</span>: <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">    <span class="comment">//后面的值决定hover类是否被添加</span></span><br><span class="line">      <span class="attr">hover</span>: <span class="variable language_">this</span>.<span class="property">index</span> === <span class="number">1</span>,</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="动态样式绑定的写法">          <a href="#动态样式绑定的写法" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态样式绑定的写法" class="headerlink" title="动态样式绑定的写法"></a>动态样式绑定的写法</h3>      <ol><li>对象写法<br>上述案例都是对象写法</li><li>数组写法<br>类名都要带引号</li></ol><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"['red-style', 'font-style']"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure>        <h2 id="动态style">          <a href="#动态style" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态style" class="headerlink" title="动态style"></a>动态style</h2>      <blockquote><p>:class可以理解为外部样式,行内样式则是:style</p></blockquote>        <h3 id="对象语法">          <a href="#对象语法" class="heading-link"><i class="fas fa-link"></i></a><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h3>      <p>和:<strong>class</strong>语法不同的是它的键值对是css样式的属性:值</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"{background:'red','font-weight':700,'font-size':'20px'}"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><ol><li>引号的使用<br>属性:属性为单个字符可以不用引号,如果是带连字符如font-weight,就要用引号值: 除了数字都要加引号<strong>要避免使用引号可以去掉连字符</strong></li><li>改变动态样式的书写位置<br>要是加的样式很多时可以将动态样式提取出来,定义在data中:</li></ol><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>){</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        <span class="attr">flexStyle</span>: {</span><br><span class="line">            <span class="attr">display</span>: <span class="string">'flex'</span>,</span><br><span class="line">            <span class="attr">flexDirection</span>: <span class="string">'column'</span>,</span><br><span class="line">            <span class="attr">justifyContent</span>: <span class="string">'space-between'</span>,</span><br><span class="line">            <span class="attr">alignItems</span>: <span class="string">'center'</span>,</span><br><span class="line">            <span class="attr">flexWrap</span>: <span class="string">'no-wrap'</span>,</span><br><span class="line">        },</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p>最后在标签中引入变量即可:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"flexStyle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="数组语法">          <a href="#数组语法" class="heading-link"><i class="fas fa-link"></i></a><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h3>      <p>:class数组里是类名所以要用””,:style数组里是变量所以不用引号</p><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="attr">fontStyle</span>: { <span class="attr">color</span>: <span class="string">'red'</span>, <span class="attr">fontSize</span>: <span class="string">'33px'</span> },</span><br><span class="line">    <span class="attr">boxStyle</span>:{<span class="attr">width</span>: <span class="string">'200px'</span>, <span class="attr">height</span>: <span class="string">'200px'</span>, <span class="attr">border</span>: <span class="string">`1px solid black`</span>}</span><br><span class="line">  };</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></div></figure><p>在标签的动态样式中引入:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"[fontStyle,boxStyle]"</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>组件是可复用的Vue实例,我们把重复用到的功能封装成自定义组件</p></blockquote>        <h2 id="自定义组件">          <a href="#自定义组件" class="heading-link"><i class="fas fa-link"></i></a><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h2>      <blockquote><p>为了能在模板中使用,组件必须先注册</p></blockquote><p>组件的注册分为全局注册和局部注册:</p><ol><li>全局注册: 用Vue.component来创建组件,注册之后可以在任何新创建的Vue根实例中使用</li><li>局部注册: 在单个Vue格式的文件中创建组件,在需要用到的地方注册</li></ol><blockquote><p><strong>通常选择局部注册</strong></p></blockquote>        <h3 id="组件的创建">          <a href="#组件的创建" class="heading-link"><i class="fas fa-link"></i></a><a href="#组件的创建" class="headerlink" title="组件的创建"></a>组件的创建</h3>      <blockquote><p>每个Vue格式的文件都可以作为组件来使用</p></blockquote>        <h3 id="组件的局部注册">          <a href="#组件的局部注册" class="heading-link"><i class="fas fa-link"></i></a><a href="#组件的局部注册" class="headerlink" title="组件的局部注册"></a>组件的局部注册</h3>      <p>通过vue-cli创建的vue工程默认存在一个组件HelloWorld.vue,以它为例:<br><img src="https://img-blog.csdnimg.cn/1dfb2b6c7edb4a589855fb9e4e602f05.png" alt="在这里插入图片描述"><br><img src="C:/Users/HP/AppData/Roaming/Typora/typora-user-images/image-20220212120332188.png" alt="image-20220212120332188"></p><blockquote><p>这样就形成了组件树,App.vue就是父组件,内部使用的HelloWorld就是子组件</p></blockquote>        <h3 id="组件中的数据">          <a href="#组件中的数据" class="heading-link"><i class="fas fa-link"></i></a><a href="#组件中的数据" class="headerlink" title="组件中的数据"></a>组件中的数据</h3>      <p>自定义组件中的<strong>data必须是一个函数</strong>:<br><strong>重复使用的组件间data是相互独立的</strong></p><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>复用的组件里显示的内容往往是不同的,同一个组件,显示内容不同</p></blockquote>        <h2 id="prop的使用方法">          <a href="#prop的使用方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#prop的使用方法" class="headerlink" title="prop的使用方法"></a>prop的使用方法</h2>      <p>当父组件给子组件的prop传递一个值的时候,这个值就变成了子组件的实例的属性</p><ol><li>首先在父组件中传递一个title给子组件:</li></ol><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意！title1 和 title2 是父组件的 data 中定义的数据，title 则是子组件中接收数据时的变量名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloVue</span> <span class="attr">:title</span>=<span class="string">"title1"</span>&gt;</span><span class="tag">&lt;/<span class="name">HelloVue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloVue</span> <span class="attr">:title</span>=<span class="string">"title2"</span>&gt;</span><span class="tag">&lt;/<span class="name">HelloVue</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p><strong>因为title1,title2是变量,所以title前面需要加 <code>:</code></strong></p><ol start="2"><li>子组件中,用<strong>prop接受title</strong>:</li></ol><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第二步：在页面上显示 title 的值，写法和显示 data 里定义的数据一样 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{ title }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">'HelloVue'</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 第一步：在 prop 属性中接收 title</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: [<span class="string">'title'</span>]</span></span><br><span class="line"><span class="language-javascript">  };</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="附带类型声明">          <a href="#附带类型声明" class="heading-link"><i class="fas fa-link"></i></a><a href="#附带类型声明" class="headerlink" title="附带类型声明"></a>附带类型声明</h3>      <p>给值声明类型,类型首字母要大写:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">'HelloVue'</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 在 prop 属性中接收 title，其类型为 String</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: {</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">title</span>: <span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript">  };</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p>在这里prop是一个对象,当传入的值有多个的时候,可以用逗号隔开可以设置一些要求:</p><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: {</span><br><span class="line">  <span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="comment">// 多类型</span></span><br><span class="line">  <span class="attr">likes</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>],</span><br><span class="line">  <span class="comment">// 带有默认值</span></span><br><span class="line">  <span class="attr">isPublished</span>: {</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="literal">true</span></span><br><span class="line">  },</span><br><span class="line">  <span class="comment">// 必填</span></span><br><span class="line">  <span class="attr">commentIds</span>: {</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">author</span>: <span class="title class_">Object</span>,</span><br><span class="line">  <span class="attr">callback</span>: <span class="title class_">Function</span>,</span><br><span class="line">  <span class="attr">contactsPromise</span>: <span class="title class_">Promise</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure>        <h2 id="单向数据流">          <a href="#单向数据流" class="heading-link"><i class="fas fa-link"></i></a><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h2>      <p>单向数据流指的是父子prop之间形成了一个单向下行绑定:父级prop的更新会向下流动到子组件中,但反过来就不行</p><ol><li>prop传入的数据需要处理可以通过<strong>计算属性</strong>对数据处理:</li></ol><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: [<span class="string">'initialTitle'</span>],</span><br><span class="line"><span class="attr">computed</span>: {</span><br><span class="line">  <span class="attr">normalizedTitle</span>: <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">    <span class="comment">// 对传入的 initialTitle 进行去空格、字母小写化处理</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">initialTitle</span>.<span class="title function_">trim</span>().<span class="title function_">toLowerCase</span>()</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><ol start="2"><li>prop传入的数据作为本地数据使用可以定义一个本地的data属性并将prop作为其初始值:</li></ol><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: [<span class="string">'initialTitle'</span>],</span><br><span class="line"><span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="comment">// 要读取 prop 里的 initialTitle，要在前面加 “this.”</span></span><br><span class="line">    <span class="comment">// 将传入的 initialTitle 作为本地属性 title 的初始值</span></span><br><span class="line">    <span class="attr">title</span>: <span class="variable language_">this</span>.<span class="property">initialTitle</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p><strong>当传入的数据是对象时,通过计算属性对对象的各个属性进行改变,而不是改变对象,传入时要判断是否传入过来了,否则数据还未到达就已经开始去取它的属性这样会发生错误</strong></p>        <h2 id="自定义组件绑定原生事件和自定义事件">          <a href="#自定义组件绑定原生事件和自定义事件" class="heading-link"><i class="fas fa-link"></i></a><a href="#自定义组件绑定原生事件和自定义事件" class="headerlink" title="自定义组件绑定原生事件和自定义事件"></a>自定义组件绑定原生事件和自定义事件</h2>      <blockquote><p>在自定义组件的根元素上监听一个原生事件在和html原生标签上监听一个原生事件是有区别的</p></blockquote><p>如在App.vue中:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 给自定义组件添加点击事件 print --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Article</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">"article in articleList"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">"article.title"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:article</span>=<span class="string">"article"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">click</span>=<span class="string">"print(article)"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">Article</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p>在Article.vue中:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article-title"</span> @<span class="attr">click</span>=<span class="string">"printTitle"</span>&gt;</span>{{ article &amp;&amp; article.title }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p>点击文章列表的标题部分可以发现<strong>只有子组件的事件被执行了</strong></p><blockquote><p>如果要让父组件的方法也执行则需要用到<strong>修饰符</strong></p></blockquote><p>要让父组件的print执行,可以添加<code>.native</code></p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Article</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">"article in articleList"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">"article.title"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:article</span>=<span class="string">"article"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">click.native</span>=<span class="string">"print(article)"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">Article</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure>        <h2 id="自定义事件">          <a href="#自定义事件" class="heading-link"><i class="fas fa-link"></i></a><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2>      <blockquote><p>我们不能直接在子组件中直接修改父组件中传来的prop数据,所以可以通过自定义事件来完成</p></blockquote><ol><li>给子组件Article.vue绑定自定义事件:<br>用<code>v-on:upVote="handLikes"</code>给Article.vue绑定自定义事件:</li></ol><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自定义事件 upVote，调用该事件时会执行 handleLikes 方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">"article in articleList"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">"article.title"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:article</span>=<span class="string">"article"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:upVote</span>=<span class="string">"handleLikes"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></div></figure><ol start="2"><li>在Article.vue中调用自定义事件”upVote” :</li></ol><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 template 中直接调用自定义事件 upVote --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$emit('upVote')"</span>&gt;</span>点赞<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p>当方法需要参数时:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"childEvent"</span>&gt;</span>点赞<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: {</span><br><span class="line">  <span class="attr">childEvent</span>: <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="comment">// 调用自定义事件 upVote，这里的第二个参数最后会传到父组件中的 handleLikes 方法里</span></span><br><span class="line">    <span class="variable language_">this</span>.$emit(<span class="string">'upVote'</span>, <span class="variable language_">this</span>.<span class="property">article</span>);</span><br><span class="line">    <span class="comment">// do other things</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p>$emit的第一个参数是自定义事件的名称后面的参数会成为自定义事件对应的方法的参数</p><p><strong>总结,自定义事件可以:</strong></p><ol><li>在子组件中调用父组件的方法</li><li>把子组件的数据通过自定义事件参数的形式传给父组件</li></ol>        <h3 id="双向绑定">          <a href="#双向绑定" class="heading-link"><i class="fas fa-link"></i></a><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h3>      <p>父组件App.vue中用修饰符<code>.sync</code>完成count的双向绑定:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyCount</span> <span class="attr">class</span>=<span class="string">"count"</span> <span class="attr">:count.sync</span>=<span class="string">"count"</span>&gt;</span><span class="tag">&lt;/<span class="name">MyCount</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 `methods` 对象中定义方法</span></span><br><span class="line"><span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p>子组件MyCount.vue中用update:count的模式触发事件,把count+1赋给count:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my-count"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$emit('update:count', count+1)"</span>&gt;</span>加一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  {{ count }}</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>通过Vue提供的ref属性去访问子组件实例,并调用子组件中的方法</p></blockquote>        <h2 id="调用子组件中的方法">          <a href="#调用子组件中的方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#调用子组件中的方法" class="headerlink" title="调用子组件中的方法"></a>调用子组件中的方法</h2>      <p>通过<code>ref</code>属性来访问子组件实例,并调用子组件中的方法:</p><ol><li>给要访问的子组件添加ref属性</li></ol><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Modal</span> <span class="attr">ref</span>=<span class="string">"modal"</span>&gt;</span><span class="tag">&lt;/<span class="name">Modal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><ol start="2"><li>调用子组件中的方法<br>通过<code>this,$refs.modal</code>来访问自定义组件Modal.vue:</li></ol><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">    <span class="title function_">showModal</span>(<span class="params"></span>) {</span><br><span class="line">      <span class="comment">// 调用子组件中的 show 方法</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">modal</span>.<span class="title function_">show</span>();</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure>        <h2 id="ref访问子元素">          <a href="#ref访问子元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#ref访问子元素" class="headerlink" title="ref访问子元素"></a>ref访问子元素</h2>      <figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">"input"</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"focusInput"</span>&gt;</span>点击使输入框获取焦点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'app'</span>,</span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">    <span class="title function_">focusInput</span>(<span class="params"></span>) {</span><br><span class="line">      <span class="comment">// this.$refs.input 访问输入框元素，并调用 focus() 方法使其获取焦点</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">input</span>.<span class="title function_">focus</span>();</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>redis的操作</title>
      <link href="/2022/02/17/redis/"/>
      <url>/2022/02/17/redis/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis">          <a href="#Redis" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2>              <h3 id="Redis简介">          <a href="#Redis简介" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h3>      <blockquote><p>Remote Dictionary Server(Redis)是一个开源的使用 ANSI<span class="exturl"><a class="exturl__link" href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80">C </a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的 API。</p><p>它通常被称为数据结构服务器，因为值（value）可以是字符串(String), 哈希(Map),列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。</p></blockquote>        <h3 id="Redis的特点">          <a href="#Redis的特点" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis的特点" class="headerlink" title="Redis的特点"></a>Redis的特点</h3>      <ol start="0"><li> 支持多种数据结构，如 string(字符串)、 list(双向链表)、dict(hash 表)、set(集合)、zset(排序 set)、hyperloglog(基数估算)等等</li><li> 支持持久化操作，可以进行 <code>aof</code> 及 <code>rdb</code> 数据持久化到磁盘，从而进行数据备份或数据恢复等操作，较好的防止数据丢失的手段。</li><li> 支持通过 Replication 进行数据复制，通过 master-slave 机制，可以实时进行数据的同步复制，支持多级复制和增量复制，master-slave 机制是 Redis 进行 HA 的重要手段。</li><li> 单进程请求，所有命令串行执行，并发情况下不需要考虑数据一致性问题(解决超卖问题)。        <h3 id="Redis单机版的安装">          <a href="#Redis单机版的安装" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis单机版的安装" class="headerlink" title="Redis单机版的安装"></a>Redis单机版的安装</h3>      </li></ol><p><strong>第一步</strong></p><blockquote><p>需要在linux系统中安装gcc</p></blockquote><figure class="highlight shell"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc-c++</span><br></pre></td></tr></tbody></table></div></figure><p><strong>第二步</strong></p><p>需要将下载好的 redis 压缩包添加到 linux 服务器(官网下载 <span class="exturl"><a class="exturl__link" href="https://redis.io/download">https://redis.io/download</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>)</p><p><strong>第三步</strong></p><blockquote><p>解压压缩包</p></blockquote><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf   redis......(这是你要解压的redis名字)</span><br></pre></td></tr></tbody></table></div></figure><p><strong>第四步</strong></p><blockquote><p>编译redis</p></blockquote><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">进入 redis 的解压完毕的根目录下 执行命令：make</span><br></pre></td></tr></tbody></table></div></figure><p><strong>第五步</strong></p><blockquote><p>安装 redis</p></blockquote><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进 入 redis 的 解 压 完 毕 的 根 目 录 下 ，执 行 命 令 ：</span><br><span class="line">make install PREFIX=/usr/local/redis</span><br></pre></td></tr></tbody></table></div></figure><p><strong>第六步</strong></p><blockquote><p>启动 redis</p></blockquote><ol><li><p>前端启动</p> <figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在 bin 目录下执行命令：  ./redis-server  </span><br><span class="line">（ctrl+c）退出 redis</span><br></pre></td></tr></tbody></table></div></figure></li></ol><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/970b23bcc921418497d2a39ec802bcde~tplv-k3u1fbpfcp-watermark.image" alt="image-20220123172033364.png"></p><p>  出现上面的表示redis启动成功,但是启动之后我们在当前环境下没法进行其他的操作,所以要改成<strong>后端启动</strong></p><ol start="2"><li><p>后端启动</p><ul><li><p>先将 redis 解压目录下的 redis.conf 文件拷贝到 安装好的 redis 的 bin 目录下命令</p>  <figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp redis.conf /usr/local/redis/bin</span><br></pre></td></tr></tbody></table></div></figure></li><li><p>修改拷贝过来的 redis.conf 配置文件</p>  <figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim redis.conf</span><br><span class="line">将daemonize no  改为 yes</span><br></pre></td></tr></tbody></table></div></figure></li><li><p>启动 redis:在后台启动redis bin 目录下执行</p>  <figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-server redis.conf</span><br></pre></td></tr></tbody></table></div></figure></li><li><p>查看 redis 启动是否成功</p>  <figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep redis</span><br></pre></td></tr></tbody></table></div></figure><p>  <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b5ef190336f41e5ac5f076955bf586c~tplv-k3u1fbpfcp-watermark.image" alt="image-20220123173706104.png"></p></li><li><p>进入redis</p>  <figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli</span><br></pre></td></tr></tbody></table></div></figure></li><li><p>关闭 redis 的命令</p>  <figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli shutdown</span><br></pre></td></tr></tbody></table></div></figure></li><li><p>第七步：测试 redi</p>  <figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在bin 目录下启动 redis 自带的客户端 </span><br><span class="line">./redis-cli</span><br><span class="line">后可以开始操作redis的数据了</span><br><span class="line">常见 redis 命令： </span><br><span class="line">ping返回&gt;pong   </span><br><span class="line">说明客户端连接上了redis</span><br></pre></td></tr></tbody></table></div></figure></li></ul></li></ol>        <h3 id="Redis数据类型">          <a href="#Redis数据类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h3>              <h4 id="String-字符串">          <a href="#String-字符串" class="heading-link"><i class="fas fa-link"></i></a><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h4>      <p>Redis 字符串是字节序列。Redis 字符串是二进制安全的，这意味着他们有一个已知的</p><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name xiao</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">"xiao"</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></tbody></table></div></figure><ul><li>  <code>incr</code> 让当前键值以 1 的数量递增，并返回递增后的值</li><li>  <code>incrby</code> 可以指定参数一次增加的数值，并返回递增后的值</li><li>  <code>decr</code> 让当前键值以 1 的数量递减 并返回递减后的值</li><li>  <code>decrby</code> 可以指定参数一次递减的数值，并返回递减后的值</li><li>  <code>incrbyfloat</code> 可以递增一个双精度浮点数</li><li>  <code>append</code> 作用是向键值的末尾追加 value。如果键不存在则将该键的值设置为 value。返回值是追加后字符串的总长度。</li><li>  mget/mset 作用与 get/set 相似，不过 mget/mset 可以同时获得/设置多个键的键值</li><li>  <code>del</code> 根据 key 来删除 value</li><li>  <code>keys *</code> ：显示当前redis中所有的key</li></ul>        <h4 id="Hash哈希">          <a href="#Hash哈希" class="heading-link"><i class="fas fa-link"></i></a><a href="#Hash哈希" class="headerlink" title="Hash哈希"></a>Hash哈希</h4>      <p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/15a4396c92ac4b74ba0060d1d8a92292~tplv-k3u1fbpfcp-watermark.image" alt="image-20220123204613807.png"><br>Redis 的哈希是键值对的集合。 Redis 的哈希值是字符串字段和字符串值之间的映射，因此它们被用来表示对象。</p><ul><li>  <strong>hset</strong> 存储一个哈希键值对的集合</li><li>  <code>hset key field value</code></li><li>  <strong>hget</strong> 获取一个哈希键的值</li><li>  <code>hget key field</code></li><li>  <strong>hmset</strong> 存储一个或多个哈希是键值对的集合</li><li>  <code>hmset key field1 value1 ......fieldN keyN</code></li><li>  <strong>hmget</strong> 获取多个指定的键的值</li><li>  <code>hmget key field1 ... fieldN</code></li><li>  <strong>hexists</strong> 判断哈希表中的字段名是否存在 如果存在返回 1 否则返回 0</li><li> <code> hexists key field</code></li><li>  <strong>hdel</strong> 删除一个或多个字段</li><li>  <code>hdel key field</code></li><li>  <strong>hgetall</strong> 获取一个哈希是键值对的集合</li><li>  <code>hgetall key</code></li><li>  <strong>hvals</strong> 只返回字段值</li><li>  <code>hvals key</code></li></ul>        <h4 id="List链表">          <a href="#List链表" class="heading-link"><i class="fas fa-link"></i></a><a href="#List链表" class="headerlink" title="List链表"></a>List链表</h4>      <p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/823b5ffbcd0f43939735130109c69c9c~tplv-k3u1fbpfcp-watermark.image" alt="image-20220123210858757.png"></p><p>Redis 的链表是简单的字符串列表，排序插入顺序。可以添加元素到 Redis 的列表的头部或尾部(可以理解为java中<code>linkedlist</code>)队列的特点:FIFO(先进的先出)</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d0e98031e9a441c9934181d1b457a328~tplv-k3u1fbpfcp-watermark.image" alt="image-20220123210921777.png"></p><ul><li>  <code>lpush key value</code> 向链表左侧添加</li><li>  <code>rpush key value</code> 向链表右侧添加</li><li>  <code>lrange key index1 index2</code> 遍历链表：取index1到index2之间的元</li><li> <code> lrange c 0 -1</code> 遍历整个c键中的元素-1代表索引最后一个</li><li>  <code>lpop</code> 从链表的左边取数据,并且移除</li><li>  <code>rpop</code> 从链表的右边取数据,并且移除</li><li>  <code>lindex key indexnumber</code> 如果要将链表类型当做数组来用，lindex 命令是必不可少的。</li><li>  <code>lindex</code> 命令用来返回指定索引的元素，索引从 0 开始,如果是负数表示从右边开始计算的索引，最右边元素的索引是-1</li><li>  <code>Lset key indexnumber value</code> 是另一个通过索引操作列表的命令，它会将索引为 index 的元素的值修改为 value。</li></ul>        <h3 id="Redis的数据持久化">          <a href="#Redis的数据持久化" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis的数据持久化" class="headerlink" title="Redis的数据持久化"></a>Redis的数据持久化</h3>              <h4 id="RDB方式-默认的备份方式">          <a href="#RDB方式-默认的备份方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#RDB方式-默认的备份方式" class="headerlink" title="RDB方式(默认的备份方式)"></a>RDB方式(默认的备份方式)</h4>      <blockquote><p>RDB 方式：将 Redis 在内存中的数据库状态保存到磁盘里面，RDB 文件是一个经过压缩的二进制文件，通过该文件可以还原生成 RDB 文件时的数据库状态（默认下，持久化到 dump.rdb 文件，并且在 redis 重启后，自动读取RDB文件中的数据，据悉，通常情况下一千万条字符串类型键，或1GB大小 的快照文件，同步到内存中的时间是 20-30 秒）</p></blockquote><p><strong>生成方式</strong></p><ol><li><p>执行命令手动生成</p><p> 有两个 Redis 命令可以用于生成 RDB 文件，一个是 <code>SAVE</code>，另一个是 <code>BGSAVE</code>;</p><ul><li>  <code>SAVE</code> 命令会阻塞 Redis 服务器进程，直到 RDB 文件创建完毕为止，在服务器进程阻塞期间，服务器不能处理任何命令请求</li><li>  <code>BGSAVE</code> 命令会派生出一个子进程，然后由子进程负责创建 RDB 文件，服务器进程（父进程）继续处理命令请求，创建 RDB 文件结束之前，客户端发送的 BGSAVE 和 SAVE 命令会被服务器拒绝</li></ul></li><li><p>通过配置自动生成(默认开启)</p><p> 可以设置服务器配置的 save 选项，让服务器每隔一段时间自动执行一次 BGSAVE 命令，可以通过 save 选项设置多个保存条件，但只要其中任意一个条件被满足，服务器就会执行 <code>BGSAVE</code> 命令</p><p> 例如：</p> <figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">save 900 1</span><br><span class="line"></span><br><span class="line">save 300 10</span><br><span class="line"></span><br><span class="line">save 60 10000</span><br></pre></td></tr></tbody></table></div></figure><p> 那么只要满足以下三个条件中-的任意一个，save 命令就会被执行服务器在</p><p> 900 秒之内，对数据库进行了至少 1 次修改服务器在</p><p> 300 秒之内，对数据库进行了至少 10 次修改服务器在</p><p> 60 秒之内，对数据库进行了至少 10000 次修改</p></li></ol>        <h4 id="AOF方式">          <a href="#AOF方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#AOF方式" class="headerlink" title="AOF方式"></a>AOF方式</h4>      <blockquote><p>AOF 持久化方式在 redis 中默认是关闭的，需要修改配置文件开启该方式。</p></blockquote><p>AOF：把每条命令都写入文件，类似 mysql 的 binlog 日志</p><p>AOF 方式：是通过保存 Redis 服务器所执行的写命令来记录数据库状态的文件。</p><p>AOF 文件刷新的方式，有三种存储策略：</p><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appendfsync always  </span><br><span class="line"></span><br><span class="line">每提交一个修改命令都调用 fsync 刷新到 AOF 文件，非常非常慢，但也非常安全</span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appendfsync everysec </span><br><span class="line"></span><br><span class="line">每秒钟都调用 fsync 刷新到 AOF 文件，很快，但可能会丢失一秒以内的数据</span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appendfsync no </span><br><span class="line"></span><br><span class="line">依靠 OS(操作系统) 进行刷新，redis 不主动刷新 AOF，这样最快，但安全性就差默认并推荐每秒刷新，这样在速度和安全上都做到了兼顾</span><br></pre></td></tr></tbody></table></div></figure><p>我使用的是第三种<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d12d3fb0f7c344aea342a58993963b4b~tplv-k3u1fbpfcp-watermark.image" alt="image-20220124205513730.png"></p><blockquote><p>手动开启aop持久化方案,数据不仅会持久化到aop中,还有持久化到rdb中,这样的持久化数据有两份，但是aop开启的时候,数据恢复是从aop文件中恢复的,只有在关闭(appendonly no)时,才会从rdb中恢复数据</p></blockquote><p><strong>AOF 数据恢复方式</strong></p><p>服务器在启动时，通过载入和执行 AOF 文件中保存的命令来还原服务器关闭之前的数据库状态，具体过程：</p><ol><li><p>载入AOF文件模拟客户端从AOF 文件中读取命令使用模拟客户端执行命令循环读取并执行命令，直到全部完成。</p></li><li><p>如果同时启用了 RDB 和 AOF 方式，AOF 优先，启动时只加载 AOF 文件恢复数据,想要加载RDB需要把AOF关闭。</p></li></ol>        <h3 id="Redis在SpringBoot中的应用">          <a href="#Redis在SpringBoot中的应用" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis在SpringBoot中的应用" class="headerlink" title="Redis在SpringBoot中的应用"></a>Redis在SpringBoot中的应用</h3>      <ol><li><p>首先将redis需要的包导入</p> <figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure></li><li><p>将redis连接的配置文件<code>application.yml</code>配置好</p> <figure class="highlight properties"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">redis</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">host</span>: <span class="string">填入你的IP</span></span><br><span class="line">    <span class="attr">port</span>: <span class="string">6379</span></span><br></pre></td></tr></tbody></table></div></figure></li><li><p>需要对<code>redis.conf</code>中进行修改，不然会连接失败</p> <figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进入文件将bind 127.0.0.1 -::1注释</span><br><span class="line">protected-mode yes 改为 protected-mode no</span><br></pre></td></tr></tbody></table></div></figure></li><li><p>准备工作做完之后，便可以测试<code>redisTemplate</code>的方法了</p> <figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.my.redis.RedisApp;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示基于springboot的测试依赖当前工程的启动类</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = RedisApp.class)</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> {</span><br><span class="line">    <span class="comment">//注入可以操作redis的模板对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作String类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRedis_String</span><span class="params">()</span>{</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">"小明"</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">//设置键为name，值为lili</span></span><br><span class="line">        redisTemplate.boundValueOps(<span class="string">"name"</span>).set(<span class="string">"lili"</span>);</span><br><span class="line">        redisTemplate.boundValueOps(<span class="string">"age"</span>).set(<span class="number">19</span>);</span><br><span class="line">        redisTemplate.boundValueOps(<span class="string">"student"</span>).set(student);</span><br><span class="line">        <span class="comment">//取数据，默认提升为Object需要转换</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String)redisTemplate.boundValueOps(<span class="string">"name"</span>).get();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">age</span> <span class="operator">=</span> (Integer)redisTemplate.boundValueOps(<span class="string">"age"</span>).get();</span><br><span class="line">        <span class="comment">//取出存入的对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student)redisTemplate.boundValueOps(<span class="string">"student"</span>).get();</span><br><span class="line">        System.out.println(stu);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(age);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置过期时间</span></span><br><span class="line"><span class="comment">         * 第一个参数时数目</span></span><br><span class="line"><span class="comment">         * 第二个参数时单位</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        redisTemplate.boundValueOps(<span class="string">"name"</span>).expire(<span class="number">1</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除key</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">delete</span> <span class="operator">=</span> redisTemplate.delete(<span class="string">"age"</span>);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作Hash类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRedis_Hash</span><span class="params">()</span>{</span><br><span class="line">        redisTemplate.boundHashOps(<span class="string">"user"</span>).put(<span class="string">"name"</span>,<span class="string">"小明"</span>);</span><br><span class="line">        <span class="comment">//获取到值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String)redisTemplate.boundHashOps(<span class="string">"user"</span>).get(<span class="string">"name"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作List类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRedis_List</span><span class="params">()</span>{</span><br><span class="line">        redisTemplate.boundListOps(<span class="string">"cities"</span>).leftPush(<span class="string">"北京"</span>);</span><br><span class="line">        redisTemplate.boundListOps(<span class="string">"cities"</span>).rightPush(<span class="string">"上海"</span>);</span><br><span class="line">        <span class="comment">//获取到值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">city1</span> <span class="operator">=</span> (String)redisTemplate.boundListOps(<span class="string">"cities"</span>).leftPop();</span><br><span class="line">        <span class="type">String</span> <span class="variable">city2</span> <span class="operator">=</span> (String)redisTemplate.boundListOps(<span class="string">"cities"</span>).rightPop();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作Set类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRedis_Set</span><span class="params">()</span>{</span><br><span class="line">        redisTemplate.boundSetOps(<span class="string">"province"</span>).add(<span class="string">"湖南"</span>);</span><br><span class="line">        redisTemplate.boundSetOps(<span class="string">"province"</span>).add(<span class="string">"湖北"</span>);</span><br><span class="line">        redisTemplate.boundSetOps(<span class="string">"province"</span>).add(<span class="string">"广西"</span>,<span class="string">"广东"</span>);</span><br><span class="line">        <span class="comment">//打印集合</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">province</span> <span class="operator">=</span> redisTemplate.boundSetOps(<span class="string">"province"</span>).members();</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="comment">//存入redis的对象一定要序列化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> {</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> {</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">''</span><span class="string">' +</span></span><br><span class="line"><span class="string">                ", age=" + age +</span></span><br><span class="line"><span class="string">                '</span>}<span class="string">';</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>当你在虚拟机redis中查看时会发现key带有前缀，是因为<code>RedisTemplate</code>默认使用反序列化工具，但不影响我们使用，这也是为什么在构建<code>POJO</code>类时需要让他可序列化</p></blockquote></li></ol><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60bdbce1be114412b37122c253db7fd5~tplv-k3u1fbpfcp-watermark.image" alt="image-20220125194125083.png"></p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
