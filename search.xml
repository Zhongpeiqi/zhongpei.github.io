<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue的学习总结</title>
      <link href="/2022/02/17/vue/"/>
      <url>/2022/02/17/vue/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue的介绍">          <a href="#Vue的介绍" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vue的介绍" class="headerlink" title="Vue的介绍"></a>Vue的介绍</h2>      <blockquote><p>Vue是用于构建用户界面的渐进式框架,主要特点是易用,灵活,性能优良</p></blockquote><p>有兴趣可以查看一下官方介绍的视频<span class="exturl"><a class="exturl__link" href="https://qgt-document.oss-cn-beijing.aliyuncs.com/P3-5-Vue/1/video/vue%20%E5%AE%98%E6%96%B9%E4%BB%8B%E7%BB%8D.mp4">点击这里</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h2 id="Vue的配置">          <a href="#Vue的配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vue的配置" class="headerlink" title="Vue的配置"></a>Vue的配置</h2>              <h3 id="安装node-js">          <a href="#安装node-js" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3>      <p>我们需要的是node.js里的<strong>npm</strong>,安装很简单首先去官网下载安装包<span class="exturl"><a class="exturl__link" href="https://nodejs.org/en/">node.js官网</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>选择下载最新版本即可,一直下一步进行安装<br><img src="https://img-blog.csdnimg.cn/9090ce2732594c24ad0398c3e888ba49.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTUzMjIzMg==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTUzMjIzMgpx;" alt="在这里插入图片描述"><br>安装完成后直接<strong>win+R</strong>打开cmd,输入<code>node -v</code>查看版本号<br><img src="https://img-blog.csdnimg.cn/57d6ddbb41b44d2687e5585a1b08bb78.png" alt="在这里插入图片描述"><br>顺带检查一下npm(包管理工具),输入<code>npm -v</code></p>        <h3 id="安装Vue-CLI-脚手架">          <a href="#安装Vue-CLI-脚手架" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装Vue-CLI-脚手架" class="headerlink" title="安装Vue CLI(脚手架)"></a>安装Vue CLI(脚手架)</h3>      <blockquote><p>Vue CLI就是Vue工程的升级版,更牛逼一点</p><p>执行以下命令(因为npm下载的插件都是国外的服务器中下载,以下代码就是将镜像切换成淘宝镜像)</p></blockquote><figure class="highlight powershell"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install <span class="literal">-g</span> cnpm <span class="literal">--registry</span>=https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight powershell"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 注意这里要用的是cnpm</span><br><span class="line">cnpm install <span class="literal">-g</span> @vue/<span class="built_in">cli</span></span><br></pre></td></tr></tbody></table></div></figure><p>输入<code>vue --version</code>验证是否安装成功</p>        <h2 id="创建Vue工程">          <a href="#创建Vue工程" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建Vue工程" class="headerlink" title="创建Vue工程"></a>创建Vue工程</h2>      <ol><li>执行以下命令创建Vue工程</li></ol><figure class="highlight powershell"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// vue 创建 工程名</span><br><span class="line">vue create vue<span class="literal">-01</span></span><br></pre></td></tr></tbody></table></div></figure><ol start="2"><li>此时会出现几个选项,选择最后一个—自定义配置(键盘上下键选择,回车确认)</li></ol><p><img src="https://img-blog.csdnimg.cn/42458d37410c452486e845760707fd67.png" alt="在这里插入图片描述"></p><ol start="3"><li>选中后进入自定义配置选项,勾选Babel,Router即可(空格选中/反选,回车确认)</li><li>下一步是询问你是否使用历史模式的路由器,根据自己的需要来选择Y OR N,然后回车<br><img src="https://img-blog.csdnimg.cn/c4ea7ab242e648a380a78fdbc0f43c91.png" alt="在这里插入图片描述"></li><li>然后询问你Babel等配置文件放哪,我们选择放在package.json里<br><img src="https://img-blog.csdnimg.cn/491302a259df4ea693a08d87727a5ecf.png" alt="在这里插入图片描述"></li><li>最后一步是问你是否保存这次配置</li></ol><p>完成以上操作后我们成功创建了一个原始的Vue项目,脚手架还送了两个命令<br><img src="https://img-blog.csdnimg.cn/04f9cec45f19426e9682e724d92fff98.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTUzMjIzMg==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTUzMjIzMgpx;" alt="在这里插入图片描述"><br>执行这两个命令<br><img src="https://img-blog.csdnimg.cn/52e5229c18f04dafb52812f88777be71.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTUzMjIzMg==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTUzMjIzMgpx;" alt="在这里插入图片描述"><br>如图给了我们两个地址,第二个为你电脑的<strong>IP地址</strong>,打开两个中任意一个即可<br><img src="https://img-blog.csdnimg.cn/9f0c94744fb64d24b84387c3a2d1745c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTUzMjIzMg==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTUzMjIzMgpx;" alt="在这里插入图片描述"></p><blockquote><p>打开后看到这个就代表你成功了</p></blockquote>        <h2 id="Vue工程目录">          <a href="#Vue工程目录" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vue工程目录" class="headerlink" title="Vue工程目录"></a>Vue工程目录</h2>      <ol><li>assets:存放项目中需要用到的<strong>资源文件</strong>,css,js,images等</li><li>componets:存放vue开发中的公共组件</li><li>router:vue路由的配置文件</li><li>views:存放页面文件</li><li>app.vue:根组件</li><li>main.js:项目的入口文件,定义了vue实例,并引入根组件app.vue</li></ol>        <h2 id="Vue代码结构">          <a href="#Vue代码结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vue代码结构" class="headerlink" title="Vue代码结构"></a>Vue代码结构</h2>      <blockquote><p>我们可以将代码写在app.vue中,以下是app.vue中的代码</p></blockquote><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// template即模版的意思，每一个vue文件里必须要有一个，在这里写HTML代码</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 在这里写js逻辑相关的代码</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">"app"</span></span></span><br><span class="line"><span class="language-javascript">  };</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 这里写样式代码</span><br><span class="line"><span class="comment">&lt;!-- scope的意思表示这段样式只在本xxx.vue文件中生效，其他xxx.vue文件中不会生效，有锁定的意思 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scope</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>每一个Vue文件由三部分组成template、script、style，分别对应HTML,JavaScript,CSS</p></blockquote><p><em>template里面只允许有一个块状元素,其他所有的标签都在这个块标签内</em></p>        <h2 id="Vue的声明渲染">          <a href="#Vue的声明渲染" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vue的声明渲染" class="headerlink" title="Vue的声明渲染"></a>Vue的声明渲染</h2>      <p>使用<strong>差值表达式</strong>来将数据渲染在页面中就是一个两层的大括号<code>{{}}</code></p>        <h3 id="字符串渲染">          <a href="#字符串渲染" class="heading-link"><i class="fas fa-link"></i></a><a href="#字符串渲染" class="headerlink" title="字符串渲染"></a>字符串渲染</h3>      <p>JS中我们会这样做</p><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"Vue"</span>;</span><br><span class="line"><span class="keyword">let</span> template = <span class="string">`&lt;h2&gt;<span class="subst">${str}</span>&lt;/h2&gt;`</span>;</span><br><span class="line"><span class="comment">// 后面省略一系列DOM操作</span></span><br></pre></td></tr></tbody></table></div></figure><p>在Vue中首先在<strong>template</strong>部分确定插值表达式的位置上,并填充变量名:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>{{title}}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p>然后再在<strong>script</strong>部分定义字符串变量:</p><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// export default是固定格式，不需要纠结</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="comment">// 模块的名字</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">    <span class="comment">// 页面中数据存放的地方</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">      <span class="keyword">return</span> {</span><br><span class="line">        <span class="attr">title</span>: <span class="string">"Vue"</span></span><br><span class="line">      };</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="数组的渲染">          <a href="#数组的渲染" class="heading-link"><i class="fas fa-link"></i></a><a href="#数组的渲染" class="headerlink" title="数组的渲染"></a>数组的渲染</h3>      <p>填充数据时可以采用数组下标的形式去取数据:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>{{title}}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>{{todoList[0]}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>{{todoList[1]}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>{{todoList[2]}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>{{todoList[3]}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>{{todoList[4]}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p>然后在script里定义数组</p><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">title</span>: <span class="string">"今日待完成事项"</span>,</span><br><span class="line">      <span class="attr">todoList</span>: [</span><br><span class="line">        <span class="string">"完成HTML标签学习"</span>,</span><br><span class="line">        <span class="string">"完成CSS文字样式学习"</span>,</span><br><span class="line">        <span class="string">"完成CSS盒模型学习"</span>,</span><br><span class="line">        <span class="string">"完成Flex布局学习"</span>,</span><br><span class="line">        <span class="string">"完成JavaScript入门学习"</span></span><br><span class="line">      ]</span><br><span class="line">    };</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><ul><li>data方法里面用来存放数据或者全局变量</li><li>scope可以理解为锁将css所在本文件中,只在本文件中有效</li></ul>        <h3 id="对象数组">          <a href="#对象数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h3>      <p> 渲染一个班级名单列表:</p><div class="table-container"><table><thead><tr><th>姓名</th><th>班级</th><th>总成绩</th></tr></thead><tbody><tr><td>张三</td><td>三年级二班</td><td>290</td></tr><tr><td>李四</td><td>三年级二班</td><td>270</td></tr><tr><td>王五</td><td>三年级二班</td><td>270</td></tr></tbody></table></div><p><strong>需要定义一个这样的变量:</strong></p><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>){</span><br><span class="line">      <span class="keyword">return</span> {</span><br><span class="line">          <span class="attr">list</span>:[</span><br><span class="line">              {</span><br><span class="line">                  <span class="attr">name</span>:<span class="string">"张三"</span>,</span><br><span class="line">                  <span class="attr">grade</span>:<span class="string">"三年级二班"</span>,</span><br><span class="line">                  <span class="attr">mark</span>:<span class="number">290</span></span><br><span class="line">              },</span><br><span class="line">              {</span><br><span class="line">                  <span class="attr">name</span>:<span class="string">"李四"</span>,</span><br><span class="line">                  <span class="attr">grade</span>:<span class="string">"三年级二班"</span>,</span><br><span class="line">                  <span class="attr">mark</span>:<span class="number">270</span></span><br><span class="line">              },</span><br><span class="line">              {</span><br><span class="line">                  <span class="attr">name</span>:<span class="string">"王五"</span>,</span><br><span class="line">                  <span class="attr">grade</span>:<span class="string">"三年级二班"</span>,</span><br><span class="line">                  <span class="attr">mark</span>:<span class="number">270</span></span><br><span class="line">              }</span><br><span class="line">          ]</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure>        <h2 id="处理用户输入">          <a href="#处理用户输入" class="heading-link"><i class="fas fa-link"></i></a><a href="#处理用户输入" class="headerlink" title="处理用户输入"></a>处理用户输入</h2>              <h3 id="v-model-双向绑定-–input">          <a href="#v-model-双向绑定-–input" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-model-双向绑定-–input" class="headerlink" title="v-model(双向绑定) –input"></a>v-model(双向绑定) –input</h3>      <blockquote><p>双向绑定就是我们在input框当中输入内容时,显示内容的地方也会随之改变</p></blockquote><p>定义一个HTML代码</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里的v-model="message"将input的值绑定--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span>{{message}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"请输入你想输入的内容"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p>定义要用到的变量</p><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">message</span>: <span class="string">""</span></span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><p>也就是改变<strong>input框中的值</strong>,<strong>message</strong>的值也将改变</p>        <h3 id="v-model-–checkbox">          <a href="#v-model-–checkbox" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-model-–checkbox" class="headerlink" title="v-model –checkbox"></a>v-model –checkbox</h3>      <p>复选框上使用双向绑定,案例如下:<br><img src="C:/Users/HP/AppData/Roaming/Typora/typora-user-images/image-20220212114741224.png" alt="image-20220212114741224"></p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"prepare"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>{{checkBox}}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>{{plan}}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"textarea"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"run"</span> <span class="attr">value</span>=<span class="string">"跑步"</span> <span class="attr">v-model</span>=<span class="string">"checkBox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"run"</span>&gt;</span>跑步<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"yujia"</span> <span class="attr">value</span>=<span class="string">"瑜伽"</span> <span class="attr">v-model</span>=<span class="string">"checkBox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"yujia"</span>&gt;</span>瑜伽<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"yangwo"</span> <span class="attr">value</span>=<span class="string">"仰卧起坐"</span> <span class="attr">v-model</span>=<span class="string">"checkBox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"yangwo"</span>&gt;</span>仰卧起坐<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">placeholder</span>=<span class="string">"请输入你的健身计划"</span> <span class="attr">v-model</span>=<span class="string">"plan"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">checkBox</span>: [],</span><br><span class="line">            <span class="attr">plan</span>:<span class="string">""</span></span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><p>因为复选框的内容可以看做一个数组,所以定义变量时可以将它定义成数组,每个选项都用<strong>v-model</strong>绑定</p>        <h2 id="处理用户事件">          <a href="#处理用户事件" class="heading-link"><i class="fas fa-link"></i></a><a href="#处理用户事件" class="headerlink" title="处理用户事件"></a>处理用户事件</h2>              <h3 id="方法">          <a href="#方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#方法" class="headerlink" title="方法"></a>方法</h3>      <p>Vue中进行两步操作,第一步:给元素添加事件,第二步给事件加方法</p><ol><li>在Vue中添加事件叫做事件绑定使用<code>@click="方法名"</code>如:<figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add()"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span>```</span><br></pre></td></tr></tbody></table></div></figure></li><li>methods(方法)<br>将方法抽离出来放在对应的位置</li></ol><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>{</span><br><span class="line">    <span class="attr">name</span>:<span class="string">"app"</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>){</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">          <span class="attr">counter</span>: <span class="number">0</span></span><br><span class="line">        };   <span class="comment">//这里要加分号</span></span><br><span class="line">    },   <span class="comment">//这里要加逗号</span></span><br><span class="line">    <span class="attr">methods</span>:{</span><br><span class="line">        <span class="comment">// 在这里存放方法</span></span><br><span class="line">        <span class="attr">add</span>:<span class="keyword">function</span>(<span class="params"></span>){</span><br><span class="line">           <span class="comment">//方法内容</span></span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">counter</span>++</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>使用data定义的变量时要在前面加this,<code>@click="add()"</code>,括号里可以传递参数</p></blockquote>        <h3 id="事件修饰符-与js中的作用一样">          <a href="#事件修饰符-与js中的作用一样" class="heading-link"><i class="fas fa-link"></i></a><a href="#事件修饰符-与js中的作用一样" class="headerlink" title="事件修饰符(与js中的作用一样)"></a>事件修饰符(与js中的作用一样)</h3>      <ol><li>阻止冒泡事件</li></ol><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.stop</span>=<span class="string">"fn2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><ol start="2"><li>捕获事件</li></ol><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span> @<span class="attr">click.capture</span>=<span class="string">"fn2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><ol start="3"><li>阻止默认事件</li></ol><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span> @<span class="attr">click.prevent</span>=<span class="string">"fn2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>监听数据变化,在Vue中是通过侦听器来实现的,时刻监听某个数据的变化</p></blockquote>        <h2 id="watch的基本用法">          <a href="#watch的基本用法" class="heading-link"><i class="fas fa-link"></i></a><a href="#watch的基本用法" class="headerlink" title="watch的基本用法"></a>watch的基本用法</h2>      <ol><li>侦听器的书写位置<br>写在<strong>export default</strong>中与<strong>data</strong>和<strong>methods</strong>用<code>,</code>隔开<figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">    <span class="comment">// 数据 key---data value---Function</span></span><br><span class="line">    <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">      <span class="keyword">return</span> {</span><br><span class="line">         <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">      };</span><br><span class="line">    },</span><br><span class="line">    <span class="comment">// 方法 key---methods value---{}</span></span><br><span class="line">    <span class="attr">methods</span>: {},</span><br><span class="line">    <span class="comment">//在export default中添加即可不用管顺序</span></span><br><span class="line">    <span class="attr">watch</span>: {</span><br><span class="line">       <span class="comment">//监听内容</span></span><br><span class="line">       <span class="title function_">count</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"count发生了变化"</span>);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure>监听器里的方法一定要与被监听的变量名一致        <h2 id="侦听器的进阶用法">          <a href="#侦听器的进阶用法" class="heading-link"><i class="fas fa-link"></i></a><a href="#侦听器的进阶用法" class="headerlink" title="侦听器的进阶用法"></a>侦听器的进阶用法</h2>              <h3 id="获取前一次的值">          <a href="#获取前一次的值" class="heading-link"><i class="fas fa-link"></i></a><a href="#获取前一次的值" class="headerlink" title="获取前一次的值"></a>获取前一次的值</h3>      </li></ol><blockquote><p>有的时候需要上一次的数据,再上一个案例中添加一个参数即可获取旧值</p></blockquote><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>:{</span><br><span class="line">    <span class="title function_">inputValue</span>(<span class="params">value,oldValue</span>) {</span><br><span class="line">        <span class="comment">// 第一个参数为新值，第二个参数为旧值，不能调换顺序</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`新值：<span class="subst">${value}</span>`</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`旧值：<span class="subst">${oldValue}</span>`</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="handler方法和immediate属性">          <a href="#handler方法和immediate属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#handler方法和immediate属性" class="headerlink" title="handler方法和immediate属性"></a>handler方法和immediate属性</h3>      <ul><li>immediate: 可以让页面第一次渲染的时候去触发侦听器</li><li>handler: 监听到修改之后这个函数会执行</li></ul><p>侦听器实际上是一个对象,里面包含了handler方法和其他属性:</p><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">    <span class="attr">watch</span>: {</span><br><span class="line">      <span class="attr">firstName</span>: {</span><br><span class="line">        <span class="attr">handler</span>: <span class="keyword">function</span> (<span class="params">newName, oldName</span>) {</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">fullName</span> = newName + <span class="string">" "</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">        },</span><br><span class="line">        <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure>        <h2 id="HTML属性渲染语法">          <a href="#HTML属性渲染语法" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTML属性渲染语法" class="headerlink" title="HTML属性渲染语法"></a>HTML属性渲染语法</h2>              <h3 id="动态绑定–v-bind">          <a href="#动态绑定–v-bind" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态绑定–v-bind" class="headerlink" title="动态绑定–v-bind"></a>动态绑定–v-bind</h3>      <blockquote><p>在HTML中每个标签都有自己的属性,要让他们随data中定义的值变化而变化,就要用到属性绑定</p></blockquote><p>例如img标签的alt属性:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"#"</span> <span class="attr">v-bind:alt</span>=<span class="string">"imgText"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">imgText</span>:<span class="string">'周杰伦演唱会图片'</span></span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><p><strong>动态渲染图片</strong></p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"album"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imgList[0]"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imgList[1]"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imgList[2]"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imgList[3]"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">      <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">      <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">          <span class="keyword">return</span> {</span><br><span class="line">              <span class="attr">imgList</span>:[</span><br><span class="line">                  <span class="string">'http://pic2.zhimg.com/50/v2-4a06728efc99ba874a5d7422fd55aaed_hd.jpg'</span>,</span><br><span class="line">                  <span class="string">'http://img2.imgtn.bdimg.com/it/u=372764256,3394765004&amp;fm=26&amp;gp=0.jpg'</span>,</span><br><span class="line">                  <span class="string">'http://img1.imgtn.bdimg.com/it/u=1898582417,1582081952&amp;fm=26&amp;gp=0.jpg'</span>,</span><br><span class="line">                  <span class="string">'http://b-ssl.duitang.com/uploads/item/201707/10/20170710141316_vVFNh.thumb.700_0.jpeg'</span></span><br><span class="line">              ]</span><br><span class="line">          };</span><br><span class="line">      };</span><br><span class="line">  }</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>这里用 <code>:src</code>是<code>v-bind:src</code>的简写,这里可以使用循环来减少代码量</p></blockquote>        <h3 id="模板中使用表达式">          <a href="#模板中使用表达式" class="heading-link"><i class="fas fa-link"></i></a><a href="#模板中使用表达式" class="headerlink" title="模板中使用表达式"></a>模板中使用表达式</h3>      <p>在差值表达式中不仅可以写一个变量,还可以进行简单的计算</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>{{index + 1 }}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">index</span>: <span class="number">0</span></span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><p>还可以在模板中使用<strong>三元表达式</strong></p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ flag?'你已经及格':'你还没有及格' }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"exchange"</span>&gt;</span>转换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">flag</span>:<span class="literal">true</span></span><br><span class="line">        };</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">methods</span>:{</span><br><span class="line">        <span class="title function_">exchange</span>(<span class="params"></span>){</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">flag</span> = !<span class="variable language_">this</span>.<span class="property">flag</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>点击按钮切换flag的值,对应的p标签的内容会随之改变</p></blockquote>        <h2 id="条件渲染语句">          <a href="#条件渲染语句" class="heading-link"><i class="fas fa-link"></i></a><a href="#条件渲染语句" class="headerlink" title="条件渲染语句"></a>条件渲染语句</h2>      <blockquote><p>可以把它看成if语句,条件满足时会显示标签里的内容</p></blockquote><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"isPassed"</span>&gt;</span>{{score}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">        <span class="comment">//当条件满足的时候，显示这里的内容</span></span><br><span class="line">            <span class="attr">score</span>: <span class="number">78</span></span><br><span class="line">        };</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">methods</span>:{</span><br><span class="line">        <span class="title function_">isPassed</span>(<span class="params"></span>){</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">score</span>&lt;<span class="number">60</span>) </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><p><strong>v-else-if和v-else的用法和if,else一样</strong></p>        <h2 id="列表渲染语句">          <a href="#列表渲染语句" class="heading-link"><i class="fas fa-link"></i></a><a href="#列表渲染语句" class="headerlink" title="列表渲染语句"></a>列表渲染语句</h2>              <h3 id="循环渲染数字">          <a href="#循环渲染数字" class="heading-link"><i class="fas fa-link"></i></a><a href="#循环渲染数字" class="headerlink" title="循环渲染数字"></a>循环渲染数字</h3>      <figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in 5"</span> <span class="attr">:key</span>=<span class="string">"item"</span>&gt;</span>{{ item }}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p>从1开始循环遍历数字直到5结束,最终得到5个li标签</p><blockquote><p>:key的作用: 为了确保每一个item是唯一的,所以需要唯一的key</p></blockquote>        <h3 id="循环渲染数组">          <a href="#循环渲染数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#循环渲染数组" class="headerlink" title="循环渲染数组"></a>循环渲染数组</h3>      <figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in nameList"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span>{{ item }}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">nameList</span>:[<span class="string">"张三"</span>,<span class="string">"李四"</span>,<span class="string">"王五"</span>]</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><p>这样可以得到一个姓名列表,(item,index)代表元素和对应的下标,<strong>in nameList</strong>意思是在这个叫nameList的数组里循环</p>        <h3 id="循环渲染对象">          <a href="#循环渲染对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#循环渲染对象" class="headerlink" title="循环渲染对象"></a>循环渲染对象</h3>      <figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    value：对象中每一项的值</span></span><br><span class="line"><span class="comment">    key：对象中每一项的键</span></span><br><span class="line"><span class="comment">    index：索引</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value,key,index) in book"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span>值：{{ value }}--键：{{ key }}--索引：{{ index }}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">book</span>:{</span><br><span class="line">                <span class="attr">bookName</span>:<span class="string">'指环王'</span>,</span><br><span class="line">                <span class="attr">author</span>:<span class="string">'JK 罗琳'</span></span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><p>结果如下:<br><img src="https://img-blog.csdnimg.cn/3eca5481a083439ebd6658f2dd122dd7.png" alt="在这里插入图片描述"></p>        <h3 id="遍历数组中的对象">          <a href="#遍历数组中的对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#遍历数组中的对象" class="headerlink" title="遍历数组中的对象"></a>遍历数组中的对象</h3>      <p>大多情况都是遍历数组中的对象</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in books"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">        {{ index+1 }}----{{ item.title }}----{{ item.author }}----{{ item.publishedTime }}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">books</span>: [</span><br><span class="line">                {</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">'《魔戒》'</span>,</span><br><span class="line">                    <span class="attr">author</span>: <span class="string">'约翰·罗纳德·瑞尔·托尔金'</span>,</span><br><span class="line">                    <span class="attr">publishedTime</span>: <span class="string">'1954'</span></span><br><span class="line">                },{</span><br><span class="line">                    <span class="attr">title</span>:<span class="string">'《哈利·波特》'</span>,</span><br><span class="line">                    <span class="attr">author</span>:<span class="string">'J·K·罗琳'</span>,</span><br><span class="line">                    <span class="attr">publishedTime</span>:<span class="string">'1997'</span></span><br><span class="line">                },{</span><br><span class="line">                    <span class="attr">title</span>:<span class="string">'《人性的弱点》'</span>,</span><br><span class="line">                    <span class="attr">author</span>:<span class="string">'戴尔•卡内基'</span>,</span><br><span class="line">                    <span class="attr">publishedTime</span>:<span class="string">'2008'</span></span><br><span class="line">                }</span><br><span class="line">            ]</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><p>结果:<br><img src="https://img-blog.csdnimg.cn/31c3140eb17c45a493e6ef86353d5de3.png" alt="在这里插入图片描述"></p>        <h2 id="计算属性">          <a href="#计算属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2>      <blockquote><p>计算属性是继data,methods,watch之后的新成员</p></blockquote><p>书写位置:</p><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'app'</span>,</span><br><span class="line">    <span class="comment">// 计算属性</span></span><br><span class="line">    <span class="attr">computed</span>: {},</span><br><span class="line">  };</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><p>计算属性的写法:</p><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">      <span class="attr">name</span>: <span class="string">"app"</span>,</span><br><span class="line">      <span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>){</span><br><span class="line">          <span class="keyword">return</span> {</span><br><span class="line">              <span class="attr">message</span>:<span class="string">"hello world!"</span></span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line">      <span class="comment">// 计算属性</span></span><br><span class="line">      <span class="attr">computed</span>:{</span><br><span class="line">      <span class="comment">//让字符串反转</span></span><br><span class="line">          <span class="attr">reverseMessage</span>:<span class="keyword">function</span>(<span class="params"></span>){</span><br><span class="line">              <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">split</span>(<span class="string">''</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">''</span>)</span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line">  };</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><p>计算属性和方法的区别:<br>上述的案例也可以用methods来实现但二者区别在于:</p><ul><li>计算属性<br>当message改变时,reverseMessage计算属性会重新计算,然后返回计算结果,message不改变时,reverseMessage计算属性会返回缓存的值而不会重新计算</li><li>方法<br>每次访问时,都会去执行方法体里的逻辑然后返回结果</li></ul><blockquote><p>总结: 计算属性避免了不必要的代码执行,性能更优</p></blockquote>        <h2 id="动态class">          <a href="#动态class" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态class" class="headerlink" title="动态class"></a>动态class</h2>              <h3 id="动态绑定">          <a href="#动态绑定" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h3>      <p>动态绑定的语法:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base"</span> <span class="attr">v-bind:class</span>=<span class="string">"{ active: isActive }"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight css"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.active</span> {</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p>isActive是boolean类型的值,决定是否应用该类名</p><ol><li><p>类名的书写<br>如果是单个类名的书写就和上面一样,如果是带字符的类名则要加引号将类名括起来</p></li><li><p>引号规则<br>看类名的引号决定外面大括号的引号:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 外双内单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"{ 'base-active': isActive }"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 外单内双 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">'{ "base-active": isActive }'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure></li></ol>        <h3 id="动态样式绑定的条件类型">          <a href="#动态样式绑定的条件类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态样式绑定的条件类型" class="headerlink" title="动态样式绑定的条件类型"></a>动态样式绑定的条件类型</h3>      <ol><li>变量形式<br>通过使用变量的形式来获取布尔值:</li></ol><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"{ active: isActive }"</span>&gt;</span>颜色<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p>在data中定义布尔类型的变量</p><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>){</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        <span class="attr">isActive</span>:<span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p>通过改变布尔值来改变动态绑定的样式</p><ol start="2"><li>方法形式<br>可以通过方法来决定渲染,看方法返回的结果得到布尔值</li><li>表达式形式</li></ol><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">"{ 'new-appear': this.type === 'NEW' }"</span>&gt;</span>新<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><ol start="4"><li>计算属性形式<br>可以将样式对象和判断条件都放在计算属性内:</li></ol><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: {</span><br><span class="line">  <span class="attr">hoverObj</span>: <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">    <span class="comment">//后面的值决定hover类是否被添加</span></span><br><span class="line">      <span class="attr">hover</span>: <span class="variable language_">this</span>.<span class="property">index</span> === <span class="number">1</span>,</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="动态样式绑定的写法">          <a href="#动态样式绑定的写法" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态样式绑定的写法" class="headerlink" title="动态样式绑定的写法"></a>动态样式绑定的写法</h3>      <ol><li>对象写法<br>上述案例都是对象写法</li><li>数组写法<br>类名都要带引号</li></ol><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"['red-style', 'font-style']"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure>        <h2 id="动态style">          <a href="#动态style" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态style" class="headerlink" title="动态style"></a>动态style</h2>      <blockquote><p>:class可以理解为外部样式,行内样式则是:style</p></blockquote>        <h3 id="对象语法">          <a href="#对象语法" class="heading-link"><i class="fas fa-link"></i></a><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h3>      <p>和:<strong>class</strong>语法不同的是它的键值对是css样式的属性:值</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"{background:'red','font-weight':700,'font-size':'20px'}"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><ol><li>引号的使用<br>属性:属性为单个字符可以不用引号,如果是带连字符如font-weight,就要用引号值: 除了数字都要加引号<strong>要避免使用引号可以去掉连字符</strong></li><li>改变动态样式的书写位置<br>要是加的样式很多时可以将动态样式提取出来,定义在data中:</li></ol><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>){</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        <span class="attr">flexStyle</span>: {</span><br><span class="line">            <span class="attr">display</span>: <span class="string">'flex'</span>,</span><br><span class="line">            <span class="attr">flexDirection</span>: <span class="string">'column'</span>,</span><br><span class="line">            <span class="attr">justifyContent</span>: <span class="string">'space-between'</span>,</span><br><span class="line">            <span class="attr">alignItems</span>: <span class="string">'center'</span>,</span><br><span class="line">            <span class="attr">flexWrap</span>: <span class="string">'no-wrap'</span>,</span><br><span class="line">        },</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p>最后在标签中引入变量即可:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"flexStyle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="数组语法">          <a href="#数组语法" class="heading-link"><i class="fas fa-link"></i></a><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h3>      <p>:class数组里是类名所以要用””,:style数组里是变量所以不用引号</p><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="attr">fontStyle</span>: { <span class="attr">color</span>: <span class="string">'red'</span>, <span class="attr">fontSize</span>: <span class="string">'33px'</span> },</span><br><span class="line">    <span class="attr">boxStyle</span>:{<span class="attr">width</span>: <span class="string">'200px'</span>, <span class="attr">height</span>: <span class="string">'200px'</span>, <span class="attr">border</span>: <span class="string">`1px solid black`</span>}</span><br><span class="line">  };</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></div></figure><p>在标签的动态样式中引入:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"[fontStyle,boxStyle]"</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>组件是可复用的Vue实例,我们把重复用到的功能封装成自定义组件</p></blockquote>        <h2 id="自定义组件">          <a href="#自定义组件" class="heading-link"><i class="fas fa-link"></i></a><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h2>      <blockquote><p>为了能在模板中使用,组件必须先注册</p></blockquote><p>组件的注册分为全局注册和局部注册:</p><ol><li>全局注册: 用Vue.component来创建组件,注册之后可以在任何新创建的Vue根实例中使用</li><li>局部注册: 在单个Vue格式的文件中创建组件,在需要用到的地方注册</li></ol><blockquote><p><strong>通常选择局部注册</strong></p></blockquote>        <h3 id="组件的创建">          <a href="#组件的创建" class="heading-link"><i class="fas fa-link"></i></a><a href="#组件的创建" class="headerlink" title="组件的创建"></a>组件的创建</h3>      <blockquote><p>每个Vue格式的文件都可以作为组件来使用</p></blockquote>        <h3 id="组件的局部注册">          <a href="#组件的局部注册" class="heading-link"><i class="fas fa-link"></i></a><a href="#组件的局部注册" class="headerlink" title="组件的局部注册"></a>组件的局部注册</h3>      <p>通过vue-cli创建的vue工程默认存在一个组件HelloWorld.vue,以它为例:<br><img src="https://img-blog.csdnimg.cn/1dfb2b6c7edb4a589855fb9e4e602f05.png" alt="在这里插入图片描述"><br><img src="C:/Users/HP/AppData/Roaming/Typora/typora-user-images/image-20220212120332188.png" alt="image-20220212120332188"></p><blockquote><p>这样就形成了组件树,App.vue就是父组件,内部使用的HelloWorld就是子组件</p></blockquote>        <h3 id="组件中的数据">          <a href="#组件中的数据" class="heading-link"><i class="fas fa-link"></i></a><a href="#组件中的数据" class="headerlink" title="组件中的数据"></a>组件中的数据</h3>      <p>自定义组件中的<strong>data必须是一个函数</strong>:<br><strong>重复使用的组件间data是相互独立的</strong></p><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>复用的组件里显示的内容往往是不同的,同一个组件,显示内容不同</p></blockquote>        <h2 id="prop的使用方法">          <a href="#prop的使用方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#prop的使用方法" class="headerlink" title="prop的使用方法"></a>prop的使用方法</h2>      <p>当父组件给子组件的prop传递一个值的时候,这个值就变成了子组件的实例的属性</p><ol><li>首先在父组件中传递一个title给子组件:</li></ol><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意！title1 和 title2 是父组件的 data 中定义的数据，title 则是子组件中接收数据时的变量名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloVue</span> <span class="attr">:title</span>=<span class="string">"title1"</span>&gt;</span><span class="tag">&lt;/<span class="name">HelloVue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloVue</span> <span class="attr">:title</span>=<span class="string">"title2"</span>&gt;</span><span class="tag">&lt;/<span class="name">HelloVue</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p><strong>因为title1,title2是变量,所以title前面需要加 <code>:</code></strong></p><ol start="2"><li>子组件中,用<strong>prop接受title</strong>:</li></ol><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第二步：在页面上显示 title 的值，写法和显示 data 里定义的数据一样 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{ title }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">'HelloVue'</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 第一步：在 prop 属性中接收 title</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: [<span class="string">'title'</span>]</span></span><br><span class="line"><span class="language-javascript">  };</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="附带类型声明">          <a href="#附带类型声明" class="heading-link"><i class="fas fa-link"></i></a><a href="#附带类型声明" class="headerlink" title="附带类型声明"></a>附带类型声明</h3>      <p>给值声明类型,类型首字母要大写:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">'HelloVue'</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 在 prop 属性中接收 title，其类型为 String</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: {</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">title</span>: <span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript">  };</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p>在这里prop是一个对象,当传入的值有多个的时候,可以用逗号隔开可以设置一些要求:</p><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: {</span><br><span class="line">  <span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="comment">// 多类型</span></span><br><span class="line">  <span class="attr">likes</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>],</span><br><span class="line">  <span class="comment">// 带有默认值</span></span><br><span class="line">  <span class="attr">isPublished</span>: {</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="literal">true</span></span><br><span class="line">  },</span><br><span class="line">  <span class="comment">// 必填</span></span><br><span class="line">  <span class="attr">commentIds</span>: {</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">author</span>: <span class="title class_">Object</span>,</span><br><span class="line">  <span class="attr">callback</span>: <span class="title class_">Function</span>,</span><br><span class="line">  <span class="attr">contactsPromise</span>: <span class="title class_">Promise</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure>        <h2 id="单向数据流">          <a href="#单向数据流" class="heading-link"><i class="fas fa-link"></i></a><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h2>      <p>单向数据流指的是父子prop之间形成了一个单向下行绑定:父级prop的更新会向下流动到子组件中,但反过来就不行</p><ol><li>prop传入的数据需要处理可以通过<strong>计算属性</strong>对数据处理:</li></ol><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: [<span class="string">'initialTitle'</span>],</span><br><span class="line"><span class="attr">computed</span>: {</span><br><span class="line">  <span class="attr">normalizedTitle</span>: <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">    <span class="comment">// 对传入的 initialTitle 进行去空格、字母小写化处理</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">initialTitle</span>.<span class="title function_">trim</span>().<span class="title function_">toLowerCase</span>()</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><ol start="2"><li>prop传入的数据作为本地数据使用可以定义一个本地的data属性并将prop作为其初始值:</li></ol><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: [<span class="string">'initialTitle'</span>],</span><br><span class="line"><span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="comment">// 要读取 prop 里的 initialTitle，要在前面加 “this.”</span></span><br><span class="line">    <span class="comment">// 将传入的 initialTitle 作为本地属性 title 的初始值</span></span><br><span class="line">    <span class="attr">title</span>: <span class="variable language_">this</span>.<span class="property">initialTitle</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p><strong>当传入的数据是对象时,通过计算属性对对象的各个属性进行改变,而不是改变对象,传入时要判断是否传入过来了,否则数据还未到达就已经开始去取它的属性这样会发生错误</strong></p>        <h2 id="自定义组件绑定原生事件和自定义事件">          <a href="#自定义组件绑定原生事件和自定义事件" class="heading-link"><i class="fas fa-link"></i></a><a href="#自定义组件绑定原生事件和自定义事件" class="headerlink" title="自定义组件绑定原生事件和自定义事件"></a>自定义组件绑定原生事件和自定义事件</h2>      <blockquote><p>在自定义组件的根元素上监听一个原生事件在和html原生标签上监听一个原生事件是有区别的</p></blockquote><p>如在App.vue中:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 给自定义组件添加点击事件 print --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Article</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">"article in articleList"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">"article.title"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:article</span>=<span class="string">"article"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">click</span>=<span class="string">"print(article)"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">Article</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p>在Article.vue中:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article-title"</span> @<span class="attr">click</span>=<span class="string">"printTitle"</span>&gt;</span>{{ article &amp;&amp; article.title }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p>点击文章列表的标题部分可以发现<strong>只有子组件的事件被执行了</strong></p><blockquote><p>如果要让父组件的方法也执行则需要用到<strong>修饰符</strong></p></blockquote><p>要让父组件的print执行,可以添加<code>.native</code></p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Article</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">"article in articleList"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">"article.title"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:article</span>=<span class="string">"article"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">click.native</span>=<span class="string">"print(article)"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">Article</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure>        <h2 id="自定义事件">          <a href="#自定义事件" class="heading-link"><i class="fas fa-link"></i></a><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2>      <blockquote><p>我们不能直接在子组件中直接修改父组件中传来的prop数据,所以可以通过自定义事件来完成</p></blockquote><ol><li>给子组件Article.vue绑定自定义事件:<br>用<code>v-on:upVote="handLikes"</code>给Article.vue绑定自定义事件:</li></ol><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自定义事件 upVote，调用该事件时会执行 handleLikes 方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">"article in articleList"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">"article.title"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:article</span>=<span class="string">"article"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:upVote</span>=<span class="string">"handleLikes"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></div></figure><ol start="2"><li>在Article.vue中调用自定义事件”upVote” :</li></ol><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 template 中直接调用自定义事件 upVote --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$emit('upVote')"</span>&gt;</span>点赞<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p>当方法需要参数时:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"childEvent"</span>&gt;</span>点赞<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: {</span><br><span class="line">  <span class="attr">childEvent</span>: <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="comment">// 调用自定义事件 upVote，这里的第二个参数最后会传到父组件中的 handleLikes 方法里</span></span><br><span class="line">    <span class="variable language_">this</span>.$emit(<span class="string">'upVote'</span>, <span class="variable language_">this</span>.<span class="property">article</span>);</span><br><span class="line">    <span class="comment">// do other things</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p>$emit的第一个参数是自定义事件的名称后面的参数会成为自定义事件对应的方法的参数</p><p><strong>总结,自定义事件可以:</strong></p><ol><li>在子组件中调用父组件的方法</li><li>把子组件的数据通过自定义事件参数的形式传给父组件</li></ol>        <h3 id="双向绑定">          <a href="#双向绑定" class="heading-link"><i class="fas fa-link"></i></a><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h3>      <p>父组件App.vue中用修饰符<code>.sync</code>完成count的双向绑定:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyCount</span> <span class="attr">class</span>=<span class="string">"count"</span> <span class="attr">:count.sync</span>=<span class="string">"count"</span>&gt;</span><span class="tag">&lt;/<span class="name">MyCount</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 `methods` 对象中定义方法</span></span><br><span class="line"><span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure><p>子组件MyCount.vue中用update:count的模式触发事件,把count+1赋给count:</p><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my-count"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$emit('update:count', count+1)"</span>&gt;</span>加一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  {{ count }}</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>通过Vue提供的ref属性去访问子组件实例,并调用子组件中的方法</p></blockquote>        <h2 id="调用子组件中的方法">          <a href="#调用子组件中的方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#调用子组件中的方法" class="headerlink" title="调用子组件中的方法"></a>调用子组件中的方法</h2>      <p>通过<code>ref</code>属性来访问子组件实例,并调用子组件中的方法:</p><ol><li>给要访问的子组件添加ref属性</li></ol><figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Modal</span> <span class="attr">ref</span>=<span class="string">"modal"</span>&gt;</span><span class="tag">&lt;/<span class="name">Modal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><ol start="2"><li>调用子组件中的方法<br>通过<code>this,$refs.modal</code>来访问自定义组件Modal.vue:</li></ol><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">    <span class="title function_">showModal</span>(<span class="params"></span>) {</span><br><span class="line">      <span class="comment">// 调用子组件中的 show 方法</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">modal</span>.<span class="title function_">show</span>();</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure>        <h2 id="ref访问子元素">          <a href="#ref访问子元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#ref访问子元素" class="headerlink" title="ref访问子元素"></a>ref访问子元素</h2>      <figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">"input"</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"focusInput"</span>&gt;</span>点击使输入框获取焦点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight javascript"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'app'</span>,</span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">    <span class="title function_">focusInput</span>(<span class="params"></span>) {</span><br><span class="line">      <span class="comment">// this.$refs.input 访问输入框元素，并调用 focus() 方法使其获取焦点</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">input</span>.<span class="title function_">focus</span>();</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>redis的操作</title>
      <link href="/2022/02/17/redis/"/>
      <url>/2022/02/17/redis/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis介绍">          <a href="#Redis介绍" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis介绍" class="headerlink" title="Redis介绍"></a>Redis介绍</h2>              <h3 id="Redis简介">          <a href="#Redis简介" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h3>      <blockquote><p>Remote Dictionary Server(Redis)是一个开源的使用 ANSI<span class="exturl"><a class="exturl__link" href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80">C </a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的 API。</p><p>它通常被称为数据结构服务器，因为值（value）可以是字符串(String), 哈希(Map),列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。</p></blockquote>        <h3 id="Redis的特点">          <a href="#Redis的特点" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis的特点" class="headerlink" title="Redis的特点"></a>Redis的特点</h3>      <ol><li>支持多种数据结构，如 string(字符串)、 list(双向链表)、dict(hash 表)、set(集合)、zset(排序 set)、hyperloglog(基数估算)等等</li><li>支持持久化操作，可以进行 aof 及 rdb 数据持久化到磁盘，从而进行数据备份或数据恢复等操作，较好的防止数据丢失的手段。</li><li>支持通过 Replication 进行数据复制，通过 master-slave 机制，可以实时进行数据的同步复制，支持多级复制和增量复制，master-slave 机制是 Redis 进行 HA 的重要手段。</li><li>单进程请求，所有命令串行执行，并发情况下不需要考虑数据一致性问题(解决超卖)。</li></ol>        <h3 id="Redis单机版的安装">          <a href="#Redis单机版的安装" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis单机版的安装" class="headerlink" title="Redis单机版的安装"></a>Redis单机版的安装</h3>      <p><strong>第一步</strong></p><blockquote><p>需要早linux系统中安装gcc</p></blockquote><figure class="highlight sh"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc-c++</span><br></pre></td></tr></tbody></table></div></figure><p><strong>第二步</strong></p><p> 需要将下载好的 redis 压缩包添加到 linux 服务器(官网下载 <span class="exturl"><a class="exturl__link" href="https://redis.io/download">https://redis.io/download</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>)</p><p><strong>第三步</strong></p><blockquote><p>解压压缩包</p></blockquote><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvfredis......</span><br></pre></td></tr></tbody></table></div></figure><p><strong>第四步</strong></p><blockquote><p>编译redis</p></blockquote><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">进入 redis 的解压完毕的根目录下 执行命令：make</span><br></pre></td></tr></tbody></table></div></figure><p><strong>第五步</strong></p><blockquote><p> 安装 redis</p></blockquote><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进 入 redis 的 解 压 完 毕 的 根 目 录 下 ，执 行 命 令 ：</span><br><span class="line">make install PREFIX=/usr/local/redis</span><br></pre></td></tr></tbody></table></div></figure><p><strong>第六步</strong></p><blockquote><p>启动 redis</p></blockquote><ol><li><p>前端启动</p><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在 bin 目录下执行命令：./redis-server</span><br><span class="line">（ctrl+c）退出 redis</span><br></pre></td></tr></tbody></table></div></figure><p><img src="C:/Users/HP/AppData/Roaming/Typora/typora-user-images/image-20220123172033364.png" alt="image-20220123172033364"></p><p>出现上面的表示redis启动成功,但是启动之后我们在当前环境下没法进行其他的操作,所以要改成<strong>后端启动</strong></p></li><li><p>后端启动</p><ul><li><p>先将 redis 解压目录下的 redis.conf 文件拷贝到 安装好的 redis 的 bin 目录下命令</p><figure class="highlight shell"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp redis.conf /usr/local/redis/bin</span><br></pre></td></tr></tbody></table></div></figure></li><li><p>修改拷贝过来的 redis.conf 配置文件</p><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim redis.conf</span><br><span class="line">将daemonize no  改为 yes</span><br></pre></td></tr></tbody></table></div></figure></li><li><p>启动 redis:在后台启动redis bin 目录下执行</p><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-server redis.conf</span><br></pre></td></tr></tbody></table></div></figure></li><li><p>查看 redis 启动是否成功</p><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep redis</span><br></pre></td></tr></tbody></table></div></figure><p><img src="C:/Users/HP/AppData/Roaming/Typora/typora-user-images/image-20220123173706104.png" alt="image-20220123173706104"></p></li><li><p>加入redis</p><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli</span><br></pre></td></tr></tbody></table></div></figure></li><li><p>关闭 redis 的命令</p><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli shutdown</span><br></pre></td></tr></tbody></table></div></figure></li><li><p>第七步：测试 redi</p><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在bin 目录下启动 redis 自带的客户端 </span><br><span class="line">./redis-cli</span><br><span class="line">后可以开始操作redis的数据了</span><br><span class="line">常见 redis 命令： </span><br><span class="line">ping返回&gt;pong   </span><br><span class="line">说明客户端连接上了redis</span><br></pre></td></tr></tbody></table></div></figure></li></ul></li></ol>        <h3 id="Redis数据类型">          <a href="#Redis数据类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h3>              <h4 id="String-字符串">          <a href="#String-字符串" class="heading-link"><i class="fas fa-link"></i></a><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h4>      <p>Redis 字符串是字节序列。Redis 字符串是二进制安全的，这意味着他们有一个已知的</p><figure class="highlight sh"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name zpq</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">"zpq"</span></span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></tbody></table></div></figure><ul><li>incr 让当前键值以 1 的数量递增，并返回递增后的值 </li><li>incrby 可以指定参数一次增加的数值，并返回递增后的值 </li><li>decr 让当前键值以 1 的数量递减 并返回递减后的值 </li><li>decrby 可以指定参数一次递减的数值，并返回递减后的值 </li><li>incrbyfloat 可以递增一个双精度浮点数</li><li>append 作用是向键值的末尾追加 value。如果键不存在则将该键的值设置为 value。返回值是追加后字符串的总长度。</li><li>mget/mset 作用与 get/set 相似，不过 mget/mset 可以同时获得/设置多个键的键值</li><li>del 根据 key 来删除 value</li><li>keys * ：显示当前redis中所有的key</li></ul>        <h4 id="Hash哈希">          <a href="#Hash哈希" class="heading-link"><i class="fas fa-link"></i></a><a href="#Hash哈希" class="headerlink" title="Hash哈希"></a>Hash哈希</h4>      <p><img src="C:/Users/HP/AppData/Roaming/Typora/typora-user-images/image-20220123204613807.png" alt="image-20220123204613807"></p><p>Redis 的哈希是键值对的集合。 Redis 的哈希值是字符串字段和字符串值之间的映射，因此它们被用来表示对象。</p><ul><li><p>hset 存储一个哈希键值对的集合</p></li><li><p>hset key field value</p></li><li><p>hget 获取一个哈希键的值</p></li><li><p>hget key field</p></li><li><p>hmset 存储一个或多个哈希是键值对的集合</p></li><li><p>hmset key field1 value1 ……fieldN keyN</p></li><li><p>hmget 获取多个指定的键的值</p></li><li><p>hmget key field1 … fieldN</p></li><li><p>hexists 判断哈希表中的字段名是否存在 如果存在返回 1 否则返回 0 </p></li><li><p>hexists key field</p></li><li><p>hdel 删除一个或多个字段</p></li><li><p>hdel key field</p></li><li><p>hgetall 获取一个哈希是键值对的集合</p></li><li><p>hgetall key</p></li><li><p>hvals 只返回字段值</p></li><li><p>hvals key</p></li></ul>        <h4 id="List链表">          <a href="#List链表" class="heading-link"><i class="fas fa-link"></i></a><a href="#List链表" class="headerlink" title="List链表"></a>List链表</h4>      <p><img src="C:/Users/HP/AppData/Roaming/Typora/typora-user-images/image-20220123210858757.png" alt="image-20220123210858757"></p><p>Redis 的链表是简单的字符串列表，排序插入顺序。您可以添加元素到 Redis 的列表的头部或尾部(可以理解为java中linkedlist)队列的特点:FIFO(先进的先出)</p><p><img src="C:/Users/HP/AppData/Roaming/Typora/typora-user-images/image-20220123210921777.png" alt="image-20220123210921777"></p><ul><li>lpush    key value 向链表左侧添加</li><li>rpush    key value 向链表右侧添加</li><li>lrange key index1 index2  遍历链表：取index1到index2之间的元</li><li>lrange c 0 -1  遍历整个c键中的元素-1代表索引最后一个</li><li>lpop从链表的左边取数据,并且移除</li><li>rpop从链表的右边取数据,并且移除</li><li>lindex key indexnumber 如果要将链表类型当做数组来用，lindex 命令是必不可少的。</li><li>lindex 命令用来返回指定索引的元素，索引从 0 开始</li><li>如果是负数表示从右边开始计算的索引，最右边元素的索引是-1</li><li>Lset key indexnumber value 是另一个通过索引操作列表的命令，它会将索引为 index 的元素的值修改为 value。</li></ul>        <h3 id="Redis的数据持久化">          <a href="#Redis的数据持久化" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis的数据持久化" class="headerlink" title="Redis的数据持久化"></a>Redis的数据持久化</h3>              <h4 id="RDB方式-默认的备份方式">          <a href="#RDB方式-默认的备份方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#RDB方式-默认的备份方式" class="headerlink" title="RDB方式(默认的备份方式)"></a>RDB方式(默认的备份方式)</h4>      <blockquote><p>RDB 方式：将 Redis 在内存中的数据库状态保存到磁盘里面，RDB 文件是一个经过压缩的二进制文件，通过该文件可以还原生成 RDB 文件时的数据库状态（默认下，持久化到 dump.rdb 文件，并且在 redis 重启后，自动读取RDB文件中的数据，据悉，通常情况下一千万条字符串类型键，或1GB大小 的快照文件，同步到内存中的时间是 20-30 秒）</p></blockquote><p><strong>生成方式</strong></p><ol><li><p>执行命令手动生成</p><p>有两个 Redis 命令可以用于生成 RDB 文件，一个是 <code>SAVE</code>，另一个是 <code>BGSAVE</code>;</p><ul><li><p><code>SAVE</code> 命令会阻塞 Redis 服务器进程，直到 RDB 文件创建完毕为止，在服务器进程阻塞期间，服务器不能处理任何命令请求</p></li><li><p><code>BGSAVE</code> 命令会派生出一个子进程，然后由子进程负责创建 RDB 文件，服务器进程（父进程）继续处理命令请求，创建 RDB 文件结束之前，客户端发送的 BGSAVE 和 SAVE 命令会被服务器拒绝</p></li></ul></li><li><p>通过配置自动生成(默认开启)</p><p>可以设置服务器配置的 save 选项，让服务器每隔一段时间自动执行一次 BGSAVE 命令，可以通过 save 选项设置多个保存条件，但只要其中任意一个条件被满足，服务器就会执行 <code>BGSAVE</code> 命令</p><p>例如：</p><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">save 900 1</span><br><span class="line"></span><br><span class="line">save 300 10</span><br><span class="line"></span><br><span class="line">save 60 10000</span><br></pre></td></tr></tbody></table></div></figure><p>那么只要满足以下三个条件中-的任意一个，save 命令就会被执行服务器在</p><p> 900 秒之内，对数据库进行了至少 1 次修改服务器在</p><p> 300 秒之内，对数据库进行了至少 10 次修改服务器在</p><p> 60 秒之内，对数据库进行了至少 10000 次修改</p></li></ol>        <h4 id="AOF方式">          <a href="#AOF方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#AOF方式" class="headerlink" title="AOF方式"></a>AOF方式</h4>      <blockquote><p>AOF 持久化方式在 redis 中默认是关闭的，需要修改配置文件开启该方式。</p></blockquote><p>AOF：把每条命令都写入文件，类似 mysql 的 binlog 日志</p><p>AOF 方式：是通过保存 Redis 服务器所执行的写命令来记录数据库状态的文件。</p><p>AOF 文件刷新的方式，有三种存储策略：</p><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appendfsync always  </span><br><span class="line"></span><br><span class="line">每提交一个修改命令都调用 fsync 刷新到 AOF 文件，非常非常慢，但也非常安全</span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appendfsync everysec </span><br><span class="line"></span><br><span class="line">每秒钟都调用 fsync 刷新到 AOF 文件，很快，但可能会丢失一秒以内的数据</span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appendfsync no </span><br><span class="line"></span><br><span class="line">依靠 OS(操作系统) 进行刷新，redis 不主动刷新 AOF，这样最快，但安全性就差默认并推荐每秒刷新，这样在速度和安全上都做到了兼顾</span><br></pre></td></tr></tbody></table></div></figure><p><img src="C:/Users/HP/AppData/Roaming/Typora/typora-user-images/image-20220124205513730.png" alt="image-20220124205513730"></p><p>这里推荐<code>appendonly yes</code></p><blockquote><p>手动开启aop持久化方案,数据不仅会持久化到aop中,还有持久化到rdb中,这样的持久化数据有两份，但是aop开启的时候,数据恢复是从aop文件中恢复的,只有在关闭(appendonly no)时,才会从rdb中恢复数据</p></blockquote><p><strong>AOF 数据恢复方式</strong></p><p> 服务器在启动时，通过载入和执行 AOF 文件中保存的命令来还原服务器关闭之前的数据库状态，具体过程：</p><p> 载入AOF文件模拟客户端从AOF 文件中读取命令使用模拟客户端执行命令循环读取并执行命令，直到全部完成。</p><p>如果同时启用了 RDB 和 AOF 方式，AOF 优先，启动时只加载 AOF 文件恢复数据,想要加载RDB需要把AOF关闭。</p>        <h3 id="Redis在SpringBoot中的应用">          <a href="#Redis在SpringBoot中的应用" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis在SpringBoot中的应用" class="headerlink" title="Redis在SpringBoot中的应用"></a>Redis在SpringBoot中的应用</h3>      <ol><li><p>首先将redis需要的包导入</p><figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure></li><li><p>将redis连接的配置文件<code>application.yml</code>配置好</p><figure class="highlight properties"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">redis</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">host</span>: <span class="string">填入你的IP</span></span><br><span class="line">    <span class="attr">port</span>: <span class="string">6379</span></span><br></pre></td></tr></tbody></table></div></figure></li><li><p>需要对<code>redis.conf</code>中进行修改，不然会连接失败</p><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进入文件将bind 127.0.0.1 -::1注释</span><br><span class="line">protected-mode yes 改为 protected-mode no</span><br></pre></td></tr></tbody></table></div></figure></li><li><p>准备工作做完之后，便可以测试<code>redisTemplate</code>的方法了</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.my.redis.RedisApp;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示基于springboot的测试依赖当前工程的启动类</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = RedisApp.class)</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> {</span><br><span class="line">    <span class="comment">//注入可以操作redis的模板对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作String类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRedis_String</span><span class="params">()</span>{</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">"小明"</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">//设置键为name，值为lili</span></span><br><span class="line">        redisTemplate.boundValueOps(<span class="string">"name"</span>).set(<span class="string">"lili"</span>);</span><br><span class="line">        redisTemplate.boundValueOps(<span class="string">"age"</span>).set(<span class="number">19</span>);</span><br><span class="line">        redisTemplate.boundValueOps(<span class="string">"student"</span>).set(student);</span><br><span class="line">        <span class="comment">//取数据，默认提升为Object需要转换</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String)redisTemplate.boundValueOps(<span class="string">"name"</span>).get();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">age</span> <span class="operator">=</span> (Integer)redisTemplate.boundValueOps(<span class="string">"age"</span>).get();</span><br><span class="line">        <span class="comment">//取出存入的对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student)redisTemplate.boundValueOps(<span class="string">"student"</span>).get();</span><br><span class="line">        System.out.println(stu);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(age);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置过期时间</span></span><br><span class="line"><span class="comment">         * 第一个参数时数目</span></span><br><span class="line"><span class="comment">         * 第二个参数时单位</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        redisTemplate.boundValueOps(<span class="string">"name"</span>).expire(<span class="number">1</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除key</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">delete</span> <span class="operator">=</span> redisTemplate.delete(<span class="string">"age"</span>);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作Hash类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRedis_Hash</span><span class="params">()</span>{</span><br><span class="line">        redisTemplate.boundHashOps(<span class="string">"user"</span>).put(<span class="string">"name"</span>,<span class="string">"小明"</span>);</span><br><span class="line">        <span class="comment">//获取到值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String)redisTemplate.boundHashOps(<span class="string">"user"</span>).get(<span class="string">"name"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作List类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRedis_List</span><span class="params">()</span>{</span><br><span class="line">        redisTemplate.boundListOps(<span class="string">"cities"</span>).leftPush(<span class="string">"北京"</span>);</span><br><span class="line">        redisTemplate.boundListOps(<span class="string">"cities"</span>).rightPush(<span class="string">"上海"</span>);</span><br><span class="line">        <span class="comment">//获取到值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">city1</span> <span class="operator">=</span> (String)redisTemplate.boundListOps(<span class="string">"cities"</span>).leftPop();</span><br><span class="line">        <span class="type">String</span> <span class="variable">city2</span> <span class="operator">=</span> (String)redisTemplate.boundListOps(<span class="string">"cities"</span>).rightPop();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作Set类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRedis_Set</span><span class="params">()</span>{</span><br><span class="line">        redisTemplate.boundSetOps(<span class="string">"province"</span>).add(<span class="string">"湖南"</span>);</span><br><span class="line">        redisTemplate.boundSetOps(<span class="string">"province"</span>).add(<span class="string">"湖北"</span>);</span><br><span class="line">        redisTemplate.boundSetOps(<span class="string">"province"</span>).add(<span class="string">"广西"</span>,<span class="string">"广东"</span>);</span><br><span class="line">        <span class="comment">//打印集合</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">province</span> <span class="operator">=</span> redisTemplate.boundSetOps(<span class="string">"province"</span>).members();</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="comment">//存入redis的对象一定要序列化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> {</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> {</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>当你在虚拟机redis中查看时会发现key带有前缀，是因为<code>RedisTemplate</code>默认使用反序列化工具，但不影响我们使用，这也是为什么在构建<code>POJO</code>类时需要让他可序列化</p></blockquote><p><img src="C:/Users/HP/AppData/Roaming/Typora/typora-user-images/image-20220125194125083.png" alt="image-20220125194125083"></p></li></ol>        <h2 id="Redis集群版">          <a href="#Redis集群版" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis集群版" class="headerlink" title="Redis集群版"></a>Redis集群版</h2>              <h3 id="介绍">          <a href="#介绍" class="heading-link"><i class="fas fa-link"></i></a><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3>      <p>Redis3.0 版本之后支持 Cluster。集群要求集群节点中必须要支持主从模式，也就说集群中的主节点(Master)至少要有一个从节点(Slave)</p><p>每一个蓝色的圈都代表着一个 redis 集群中的主节点。它们任何两个节点之间都是相互连通的。客户端可以与任何一个节点相连接，然后就可以访问集群中的任何一个节点。对其进行存取和其他操作。</p><p><strong>架构图</strong></p><p><img src="C:/Users/HP/AppData/Roaming/Typora/typora-user-images/image-20220125210230406.png" alt="image-20220125210230406"></p>        <h3 id="Redis-Cluster-选举-容错">          <a href="#Redis-Cluster-选举-容错" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis-Cluster-选举-容错" class="headerlink" title="Redis-Cluster 选举:容错"></a>Redis-Cluster 选举:容错</h3>      <p>Redis 之间通过互相的 <code>ping-pong</code> 判断是否节点可以连接上。如果有一半以上的节点去 ping 一个节点的时候没有回应，集群就认为这个节点宕机了，然后去连接它的从节点。如果某个节点和所有从节点全部挂掉，这个节点就进入 fail 状态。还有就是如果有一半以上的主节点宕机，那么我们集群同样进入 fail 了状态。这就是我们的 redis 的投票机制，具体原理如下图所示：</p><p><img src="C:/Users/HP/AppData/Roaming/Typora/typora-user-images/image-20220125210341817.png" alt="image-20220125210341817"></p><p>投票过程是集群中所有 master 参与,如果半数以上 master 节点与 master 节点通信超时(cluster-node-timeout),认为当前 master 节点挂掉.</p><blockquote><p>什么时候整个集群不可用(cluster_state:fail)?</p></blockquote><ol><li>如果集群任意 master 挂掉,且当前 master 没有 slave。此时集群进入 fail 状态,也可以理解成集群的 slot 映射[0-16383]不完整时进入 fail 状态。</li><li>如果集群超过半数以上 master 挂掉，无论是否有 slave，集群进入 fail 状态</li></ol>        <h3 id="Redis-Cluster-数据存储">          <a href="#Redis-Cluster-数据存储" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis-Cluster-数据存储" class="headerlink" title="Redis-Cluster 数据存储"></a>Redis-Cluster 数据存储</h3>      <p>当我们的存取的 key 到达的时候，redis 会根据 crc16 的算法得出一个结果，然后把结果<strong>对 16384 求余数</strong>，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽(类比数组中的下标索引)，通过这个值，去找到对应的插槽所对应的节点，然后直接自动跳转到这个对应的节点上进行存取操作。</p><p><img src="C:/Users/HP/AppData/Roaming/Typora/typora-user-images/image-20220125210926847.png" alt="image-20220125210926847"></p>        <h4 id="举个栗子">          <a href="#举个栗子" class="heading-link"><i class="fas fa-link"></i></a><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h4>      <p>在 Node1 执行 <code>set name kevin</code></p><ol><li><p>使用 CRC16 算法对 key 进行计算，得到一个数字，然后对数字进行取余</p><p>CRC16 : name = 26384</p><p> 26384%16384 = 10000</p></li><li><p>查找到包含 10000 插槽的节点，比如是 node2，自动跳转到 node2</p></li><li><p>在 node2 上执行 set name kevin 命令完成数据的插入</p></li><li><p>如果在 node1 上执行 get name，先使用 CRC16 算法对 key 进行计算，再使用 16384 取余，得到插槽的下标，然后跳到拥有该插槽的 node2 中执行 get name 命令，并返回结果。</p></li></ol>        <h3 id="安装Redis集群">          <a href="#安装Redis集群" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装Redis集群" class="headerlink" title="安装Redis集群"></a>安装Redis集群</h3>      <blockquote><p>搭建一个 Redis 的最小集群，使用伪集群方式。<br>Redis 中最小的集群三对主从。<br>在192.168.136.128 中安装 6 个 redis 实例。<br>如果使用已经使用过的单机版创建集群时，需要删除 <strong>dump.rdb</strong> 与 <strong>apeendonly.aof</strong> 文件。<br>6 个 redis 实例的端口分配：7001、7002、7003、7004、7005、7006</p></blockquote>        <h4 id="集群步骤">          <a href="#集群步骤" class="heading-link"><i class="fas fa-link"></i></a><a href="#集群步骤" class="headerlink" title="集群步骤"></a>集群步骤</h4>      <ol><li><p>先创建redis的6个实例，先在local目录下创建一个目录名称为<code>rediscluster</code></p><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir rediscluster</span><br></pre></td></tr></tbody></table></div></figure></li><li><p>将安装好的redis下的bin目录下拷贝到<code>rediscluster</code>并起名为redis01</p><figure class="highlight shell"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进入到redis目录下执行</span><br><span class="line">cp -r bin ../rediscluster/redis01</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>拷贝之前一定要删除<code>dump.rbd</code>和<code>aof</code>文件</p></blockquote></li><li><p>修改redis01的redis.conf配置文件</p><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">port 7001（每个节点的端口号）</span><br><span class="line">daemonize yes</span><br><span class="line">bind 192.168.136.128（绑定当前机器 IP）</span><br><span class="line">pidfile /var/run/redis_7001.pid（pid 7001和port要对应）</span><br><span class="line">cluster-enabled yes（启动集群模式）</span><br><span class="line">cluster-config-file nodes7001.conf（7001和port要对应）</span><br><span class="line">cluster-node-timeout 15000</span><br><span class="line">appendonly yes</span><br></pre></td></tr></tbody></table></div></figure></li><li><p>按照上述操作进行复制6份，并修改端口号</p></li></ol>        <h4 id="安装集群所需软件">          <a href="#安装集群所需软件" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装集群所需软件" class="headerlink" title="安装集群所需软件"></a>安装集群所需软件</h4>      <blockquote><p>由于Redis集群需要使用ruby命令，所以我们需要安装ruby和相关接口</p></blockquote><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install ruby</span><br><span class="line">yum install rubygems</span><br><span class="line">gem install redis</span><br></pre></td></tr></tbody></table></div></figure><p>在rediscluster目录下执行</p><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster create 192.168.136.128:7001 192.168.136.128:7002 192.168.136.128:7003 192.168.136.128:7004 192.168.136.128:7005 192.168.136.128:7006 --cluster-replicas 1</span><br></pre></td></tr></tbody></table></div></figure><p><img src="C:/Users/HP/AppData/Roaming/Typora/typora-user-images/image-20220126171543374.png" alt="image-20220126171543374"></p><p>点击yes开始创建集群</p><p>进入子redis测试</p><figure class="highlight plaintext"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd redis01</span><br><span class="line">./redis-cli -h 192.168.136.128 -p 7001  -c</span><br></pre></td></tr></tbody></table></div></figure>        <h2 id="redission">          <a href="#redission" class="heading-link"><i class="fas fa-link"></i></a><a href="#redission" class="headerlink" title="redission"></a>redission</h2>      <blockquote><p>它提供的功能远超出一个Redis客户端的范畴，使用它来代替默认的<code>Lettuce</code>在可以使用基本功能的同时，也能使用它提供的高级服务。</p></blockquote><ul><li>远程调用</li><li>分布式锁</li><li>分布式对象和容器</li></ul>        <h3 id="集成">          <a href="#集成" class="heading-link"><i class="fas fa-link"></i></a><a href="#集成" class="headerlink" title="集成"></a>集成</h3>      <figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.13.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure><p>还需要在<code>application.properties</code>中对它进行配置</p><figure class="highlight xml"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//redis启动主机ip</span><br><span class="line">spring.redis.host=</span><br><span class="line">//redis端口号</span><br><span class="line">spring.redis.port=</span><br><span class="line">//redis登录密码</span><br><span class="line">spring.redis.password=</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="分布式ID">          <a href="#分布式ID" class="heading-link"><i class="fas fa-link"></i></a><a href="#分布式ID" class="headerlink" title="分布式ID"></a>分布式ID</h3>      <blockquote><p>ID是数据唯一标识，传统的做法就是利用UUID和数据库的自增ID，但由于UUID是无序的。不能附带一些其他的信息，而自增ID容易造成ID冲突。</p></blockquote><p>由于Redis的所有命令操作都是单线程的，本身提供像<code>incr</code>和<code>increby</code>的这样的自增原子命令，所以能保证生成的ID是唯一有序的。</p><p><strong>例如订单号</strong></p><p>线上购买产品都会生成一个订单号，现在我们根据当天时间及订单生成的序号来生成一个唯一的 ID（如ID为”<strong>202006011</strong>“前八位表示是2020 年 6 月 1 号生成的，后面的序号表示是第一个订单）具体代码如下：</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.redisson.api.RAtomicLong;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoIdController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/getautoid")</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAutoId</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">        <span class="comment">//格式化格式为年月日</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">dateTimeFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line">        <span class="comment">//获取当前时间</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">now</span> <span class="operator">=</span> LocalDate.now().format(dateTimeFormatter);</span><br><span class="line">        <span class="comment">//通过redis的自增获取序号</span></span><br><span class="line">        <span class="type">RAtomicLong</span> <span class="variable">atomicLong</span> <span class="operator">=</span> redissonClient.getAtomicLong(now);</span><br><span class="line">        <span class="comment">//设置过期时间</span></span><br><span class="line">        atomicLong.expire(<span class="number">1</span>, TimeUnit.DAYS);</span><br><span class="line">        <span class="comment">//拼装订单号</span></span><br><span class="line">        <span class="keyword">return</span> now + <span class="string">""</span> + atomicLong.incrementAndGet();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="分布式锁">          <a href="#分布式锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3>      <p><img src="https://style.youkeda.com/newcoursep4/d3/toprur.svg" alt="img"></p><blockquote><p>上图中用户 A 在购买商品时，查询到商品 P 如果库存是m这时候在查询过程中，B 用户也来购买，查询到库存是 m当用户 A 购买时，更新数据库库存为 m-1，这时候 B 用户也会更新数据库库存为m-1,这样就会造成数据错误（用户B应该更新为m-2）为了能解决这个问题，分布式锁就应运而生。</p></blockquote><p>我们无法保证某个数据的改变是同一台服务器操作的，我们需要一个能锁所有服务器的锁。</p>        <h4 id="Redis分布式锁">          <a href="#Redis分布式锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis分布式锁" class="headerlink" title="Redis分布式锁"></a>Redis分布式锁</h4>      <p>1.取得锁</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CUSTOM_NAME 自定义锁名称字符串，一般是跟业务相关的名称</span></span><br><span class="line"><span class="comment">//Rlock 继承于 java.util.concurrent.locks.Lock;</span></span><br><span class="line"><span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">"CUSTOM_NAME"</span>)</span><br></pre></td></tr></tbody></table></div></figure><p>2.上的锁</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 上锁过程</span></span><br><span class="line"><span class="comment">* 两种常用上锁方式tryLock()或者lock()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">rLock.tryLock();</span><br></pre></td></tr></tbody></table></div></figure><p>3.解锁</p><figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解锁</span></span><br><span class="line">rLock.unlock();</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>有上锁就必须解锁，否则会导致死锁</p></blockquote>        <h4 id="实现代码">          <a href="#实现代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4>      <figure class="highlight java"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.youkeda.app.control;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.youkeda.app.model.Product;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RLock;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Product&gt; products = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(ProductController.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> {</span><br><span class="line">        products.add(<span class="keyword">new</span> <span class="title class_">Product</span>(<span class="string">"1"</span>));</span><br><span class="line">        products.add(<span class="keyword">new</span> <span class="title class_">Product</span>(<span class="string">"2"</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping("/purchase")</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">purchase</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取分布式锁</span></span><br><span class="line">        <span class="type">RLock</span> <span class="variable">transferLock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">"PURCHASE"</span>);</span><br><span class="line"></span><br><span class="line">        transferLock.lock();</span><br><span class="line">        <span class="comment">//业务逻辑卸载try...catch中 ，finally最后一定要释放锁</span></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//尝试获取锁</span></span><br><span class="line">            <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> findById(<span class="string">"1"</span>);</span><br><span class="line">            <span class="keyword">if</span> (product.getStock() &lt; <span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"商品已经卖完啦！！！"</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            product.setStock(product.getStock() - <span class="number">1</span>);</span><br><span class="line">            updateProduct(product);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"商品购买成功！！！"</span>;</span><br><span class="line"></span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            logger.error(<span class="string">""</span>,e);</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="comment">// 无论是否出现异常，一定解锁</span></span><br><span class="line">            transferLock.unlock();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"商品购买失败"</span>;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询商品</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 唯一id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Product</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Product <span class="title function_">findById</span><span class="params">(String id)</span> {</span><br><span class="line">        <span class="keyword">for</span> (Product product : products) {</span><br><span class="line">            <span class="keyword">if</span> (product.getId().equals(id)) {</span><br><span class="line">                <span class="keyword">return</span> product;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Product <span class="title function_">updateProduct</span><span class="params">(Product product)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; products.size(); i++) {</span><br><span class="line">            <span class="keyword">if</span> (products.get(i).getId().equals(product.getId())) {</span><br><span class="line">                products.set(i, product);</span><br><span class="line">                <span class="keyword">return</span> product;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="Redis事务与分布式锁">          <a href="#Redis事务与分布式锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis事务与分布式锁" class="headerlink" title="Redis事务与分布式锁"></a>Redis事务与分布式锁</h3>      <p><strong>事务</strong></p><p>事务实际上是一组操作的有序集合，事务是 Redis 最小的执行单位，一个事务中的操作要么都执行，要么都不执行。</p><p>事务的特点是，事务只会在数据被某客户端抢先修改的情况下，通知其他执行这些命令的客户端, 让它撤销对数据的修改操作，并不能阻止其他客户端对数据进行修改。</p><p>也就是说，每个事物都不知道数据有没有被修改，默认当做没有被修改，持续执行命令，直到收到系统的通知而撤消操作。</p><p><strong>分布式锁</strong></p><p>分布式锁是控制共享资源的一种方式，采用互斥的方式来防止彼此干扰从而保证一致性，互斥就意味着独占，阻止其他客户端对数据进行修改。</p><p>也就意味着，每个客户端都知道自己有没有抢占到锁，抢占到锁就执行，没有抢占成功就不执行。</p>]]></content>
      
      
      <categories>
          
          <category> https://www.qlkj.ink/images/redis.jpg </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
